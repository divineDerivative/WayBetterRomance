<?xml version="1.0"?>
<doc>
    <assembly>
        <name>0DivineFramework</name>
    </assembly>
    <members>
        <member name="T:DivineFramework.UI.Heights">
            <summary>Constant heights for various elements, to help with calculations on the implementation side.</summary>
        </member>
        <member name="T:DivineFramework.UI.LabelDelegate">
            <LabelDelegate>
			<summary>A <see langword="delegate" /> for creating a text label.</summary>
			<returns>A <see cref="T:Verse.TaggedString" /> with the text of the label.</returns>
		</LabelDelegate>
        </member>
        <member name="T:DivineFramework.UI.OnClickDelegate">
            <summary>A <see langword="delegate"/> that will be called when a button is pressed.</summary>
        </member>
        <member name="T:DivineFramework.UI.HideDelegate">
            <summary>A <see langword="delegate"/> used to determine if an element should be hidden.</summary>
        </member>
        <member name="T:DivineFramework.UI.SetUpDelegate">
            <summary>A <see langword="delegate"/> used to set up a <see cref="T:DivineFramework.UI.Handler`2"/>.</summary>
        </member>
        <member name="T:DivineFramework.UI.DrawDelegate">
            <summary>A <see langword="delegate"/> that can be called before or after drawing an element.</summary>
        </member>
        <member name="T:DivineFramework.UI.UICheckbox">
            <summary>A simple check box to toggle a setting.</summary>
        </member>
        <member name="M:DivineFramework.UI.UICheckbox.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
        </member>
        <member name="M:DivineFramework.UI.UICheckbox.#ctor(DivineFramework.UI.UIWithReference{System.Boolean})">
            <DerivedFromParent>
		<summary>Creates a new instance of this class using an existing element as a template.</summary>
		<param name="element">The existing element to use as a template.</param>
	</DerivedFromParent>
        </member>
        <member name="M:DivineFramework.UI.UICheckbox.Initialize">
            <Initialize>
			<summary><inheritdoc /> Sets the <see cref="F:DivineFramework.UI.UIElement.height">height</see> to match the size of the check box.</summary>
		</Initialize>
        </member>
        <member name="T:DivineFramework.UI.UICheckboxLabelled">
            <summary>A check box with a label.</summary>
        </member>
        <member name="F:DivineFramework.UI.UICheckboxLabelled.labelKey">
            <ILabelled>
			<summary>A <see langword="delegate" /> to the function used to determine the plain text of the label.</summary>
		</ILabelled>
        </member>
        <member name="M:DivineFramework.UI.UICheckboxLabelled.#ctor(DivineFramework.UI.UICheckbox)">
            <Initialize>
			<summary><inheritdoc /> Sets the <see cref="F:DivineFramework.UI.UIElement.height">height</see> to match the size of the check box.</summary>
		</Initialize>
        </member>
        <member name="T:DivineFramework.UI.UIColumn">
            <summary>A <see cref="T:DivineFramework.UI.UIElement"/> that can contain other elements. Elements are drawn vertically in the order they were added to the column.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIColumn.#ctor(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <UIColumn>
		<Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
        <param name="spacing">The spacing between elements in the column.</param>
	</UIColumn>
        </member>
        <member name="M:DivineFramework.UI.UIColumn.Draw(UnityEngine.Rect)">
            <Draw>
			<summary>Draws all inner <see cref="F:DivineFramework.UI.UIContainer.elements">elements</see> in the order they were added to the section.</summary>
			<remarks>Hidden elements are not drawn. If the size of any element is not valid, or the sizing of the section has changed, the section is marked as invalid.</remarks>
			<inheritdoc />
		</Draw>
        </member>
        <member name="T:DivineFramework.UI.UIContainer">
            <summary>Base class for implementing <see cref="T:DivineFramework.UI.IContainer`1"/>; a <see cref="T:DivineFramework.UI.UIElement"/> that can contain other elements.</summary>
        </member>
        <member name="F:DivineFramework.UI.UIContainer.elements">
            <summary>The elements that will be drawn when this container is drawn.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.Add(DivineFramework.UI.UIElement,System.String)">
            <AddElement>
			<summary>Add an element to this container.</summary>
			<remarks>Only add an element after you have finished modifying it. Some of these operations change the <see langword="type" />, resulting in a new <see langword="object" /> being created. Only add the element at the end to be sure the completed object is what is added to the container.</remarks>
			<param name="element">The element to add.</param>
			<param name="name">Optional name for the element. Must be unique within this container.</param>
			<returns><see langword="true" /> if the element was added.</returns>
		</AddElement>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.CalculateWidths">
            <summary>Assign widths to all elements in this container.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.CalculateHeights">
            <summary>Assign heights to all elements in this container.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.AddLabel(DivineFramework.UI.LabelDelegate,System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <AddLabel>
			<summary>Add an element for a text label.</summary>
			<returns>The newly created <see cref="T:DivineFramework.UI.UILabel" />.</returns>
			<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
			<param name="name">Optional name for the element. Must be unique within this container.</param>
			<WithLabel>
			<param name="labelKey">A <see langword="delegate" /> to the function used to determine the plain text of the label.</param>
		</WithLabel>
		</AddLabel>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.AddHeader(DivineFramework.UI.LabelDelegate,System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <AddLabel>
			<summary>Add an element for a text label.</summary>
			<returns>The newly created <see cref="T:DivineFramework.UI.UILabel" />.</returns>
			<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
			<param name="name">Optional name for the element. Must be unique within this container.</param>
			<WithLabel>
			<param name="labelKey">A <see langword="delegate" /> to the function used to determine the plain text of the label.</param>
		</WithLabel>
		</AddLabel>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.AddSpace(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <AddSpace>
			<summary>Add an element for a blank space.</summary>
			<param name="height">A fixed height for the space; optional.</param>
			<returns>The newly created <see cref="T:DivineFramework.UI.UISpace" />.</returns>
			<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
			<param name="name">Optional name for the element. Must be unique within this container.</param>
		</AddSpace>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.AddLine(System.Single,System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <AddLine>
			<summary>Add a horizontal line</summary>
			<param name="gapHeight">The height of the element. The line will be drawn in the middle.</param>
			<returns>The newly created <see cref="T:DivineFramework.UI.UILine" />.</returns>
			<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
			<param name="name">Optional name for the element. Must be unique within this container.</param>
		</AddLine>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.AddResetButton``1(DivineFramework.UI.SettingsHandler{``0},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <AddResetButton>
			<summary>Add an element for a button that will reset all values registered to the <paramref name="handler" />.</summary>
			<param name="handler">The <see cref="T:DivineFramework.UI.SettingsHandler`1" /> to reset.</param>
			<returns>The newly created <see cref="T:DivineFramework.UI.UIButtonText" />.</returns>
			<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
			<param name="name">Optional name for the element. Must be unique within this container.</param>
			<param name="buttonHeight">A fixed height for the button; optional.</param>
			<typeparam name="T">The <see cref="T:Verse.ModSettings" /> subclass associated with this <see cref="T:DivineFramework.UI.SettingsHandler`1" />.</typeparam>
		</AddResetButton>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.AddRow(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <AddRow>
			<summary>Add an inner row to hold other elements.</summary>
			<param name="gap">The spacing between elements in the row; optional, will default to <see cref="F:Verse.Listing.ColumnSpacing" />.</param>
			<returns>The newly created <see cref="T:DivineFramework.UI.UIRow" />.</returns>
			<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
			<param name="name">Optional name for the element. Must be unique within this container.</param>
		</AddRow>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.AddColumn(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <!-- No matching elements were found for the following include tag --><include file="Docs/UIElements.xml" path="doc/UIContainer/AddColumn" /> doesn't exist yet
        </member>
        <member name="M:DivineFramework.UI.UIContainer.AddSection(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <AddSection>
			<summary>Add an inner section to hold other elements.</summary>
			<returns>The newly created <see cref="T:DivineFramework.UI.UISection" />.</returns>
			<param name="spacing">The spacing between elements in the section.</param>
			<param name="sectionBorder">The space between the border of the section and the <see cref="T:UnityEngine.Rect" /> where the elements are drawn, for the top and sides only.</param>
			<param name="bottomBorder">Same as <paramref name="sectionBorder" /> but for the bottom of the section.</param>
			<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
			<param name="name">Optional name for the element. Must be unique within this container.</param>
		</AddSection>
        </member>
        <member name="T:DivineFramework.UI.UIRow">
            <summary>A <see cref="T:DivineFramework.UI.UIElement"/> that can contain other elements. Elements are drawn horizontally in the order they were added to the container.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIRow.#ctor(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
            <param name="gap">The spacing between elements in the row.</param>
        </member>
        <member name="M:DivineFramework.UI.UIRow.Initialize">
            <Initialize>
			<summary><inheritdoc /> Determines width for any inner <see cref="F:DivineFramework.UI.UIContainer.elements">elements</see> that have no <see cref="P:DivineFramework.UI.UIElement.Width">actual width</see> assigned yet.</summary>
		</Initialize>
        </member>
        <member name="M:DivineFramework.UI.UIRow.Draw(UnityEngine.Rect)">
            <Draw>
			<summary>Draws all inner <see cref="F:DivineFramework.UI.UIContainer.elements">elements</see> in the order they were added to the row.</summary>
			<remarks>Hidden elements are not drawn, but the space they would have taken up is still used. If the size of any element is not valid, the row is marked as invalid.</remarks>
			<inheritdoc />
		</Draw>
        </member>
        <member name="T:DivineFramework.UI.UISection">
            <summary>A <see cref="T:DivineFramework.UI.UIElement"/> for a section box that can contain other elements. Elements are drawn vertically in the order they were added to the section.</summary>
        </member>
        <member name="M:DivineFramework.UI.UISection.#ctor(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <UIColumn>
		<Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
        <param name="spacing">The spacing between elements in the column.</param>
	</UIColumn>
            <param name="sectionBorder">The space between the border of the section and the <see cref="T:UnityEngine.Rect" /> where the elements are drawn, for the top and sides only.</param>
            <param name="bottomBorder">Same as <paramref name="sectionBorder" /> but for the bottom of the section.</param>
        </member>
        <member name="M:DivineFramework.UI.UISection.Draw(UnityEngine.Rect)">
            <Draw>
			<summary>Draws all inner <see cref="F:DivineFramework.UI.UIContainer.elements">elements</see> in the order they were added to the section.</summary>
			<remarks>Hidden elements are not drawn. If the size of any element is not valid, or the sizing of the section has changed, the section is marked as invalid.</remarks>
			<inheritdoc />
		</Draw>
        </member>
        <member name="T:DivineFramework.UI.UIInput`1">
            <summary>Base class for elements with an input field.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIInput`1.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
        </member>
        <member name="M:DivineFramework.UI.UIInput`1.#ctor(DivineFramework.UI.UIWithReference{`0})">
            <DerivedFromParent>
		<summary>Creates a new instance of this class using an existing element as a template.</summary>
		<param name="element">The existing element to use as a template.</param>
	</DerivedFromParent>
        </member>
        <member name="M:DivineFramework.UI.UIInput`1.Reset">
            <summary><inheritdoc/> Also resets the buffer for input fields.</summary>
        </member>
        <member name="T:DivineFramework.UI.UIInputSingleLine`1">
            <summary>Base class for elements with a single line input field.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIInputSingleLine`1.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
        </member>
        <member name="M:DivineFramework.UI.UIInputSingleLine`1.#ctor(DivineFramework.UI.UIInput{`0})">
            <DerivedFromParent>
		<summary>Creates a new instance of this class using an existing element as a template.</summary>
		<param name="element">The existing element to use as a template.</param>
	</DerivedFromParent>
        </member>
        <member name="M:DivineFramework.UI.UIInputSingleLine`1.Initialize">
            <Initialize>
			<summary><inheritdoc /> Sets the <see cref="F:DivineFramework.UI.UIElement.height">height</see> to be the same as one line of text.</summary>
		</Initialize>
        </member>
        <member name="T:DivineFramework.UI.UIInputInt">
            <summary>An element that allows the user to input an <see cref="T:System.Int32"/>. Optional min and max values.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIInputInt.#ctor(DivineFramework.UI.UIInputSingleLine{System.Int32})">
            <DerivedFromParent>
		<summary>Creates a new instance of this class using an existing element as a template.</summary>
		<param name="element">The existing element to use as a template.</param>
	</DerivedFromParent>
        </member>
        <member name="T:DivineFramework.UI.UIInputFloat">
            <summary>An element that allows the user to input an <see cref="T:System.Single"/>. Optional min and max values.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIInputFloat.#ctor(DivineFramework.UI.UIInputSingleLine{System.Single})">
            <DerivedFromParent>
		<summary>Creates a new instance of this class using an existing element as a template.</summary>
		<param name="element">The existing element to use as a template.</param>
	</DerivedFromParent>
        </member>
        <member name="T:DivineFramework.UI.UIRange`2">
            <UIRange>
		<summary>Base class for a range slider.</summary>
		<ForRange>
			<typeparam name="T">The <see langword="type" /> of the setting being referenced. Must be <see cref="T:Verse.IntRange" /> or <see cref="T:Verse.FloatRange" />.</typeparam>
			<typeparam name="U">The corresponding numeric type of <typeparamref name="T" />: <see cref="T:System.Int32" /> or <see cref="T:System.Single" />.</typeparam>
		</ForRange>
	</UIRange>
        </member>
        <member name="M:DivineFramework.UI.UIRange`2.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
        </member>
        <member name="T:DivineFramework.UI.UIIntRange">
            <summary>A slider for an <see cref="T:Verse.IntRange"/></summary>
        </member>
        <member name="M:DivineFramework.UI.UIIntRange.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
        </member>
        <member name="T:DivineFramework.UI.UIFloatRange">
            <summary>
            A slider for an <see cref="T:Verse.FloatRange"/>
            </summary>
        </member>
        <member name="M:DivineFramework.UI.UIFloatRange.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
        </member>
        <member name="T:DivineFramework.UI.UISlider`1">
            <summary>Base class for a horizontal slider.</summary>
            <typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam>
        </member>
        <member name="M:DivineFramework.UI.UISlider`1.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
        </member>
        <member name="T:DivineFramework.UI.UISliderInt">
            <summary>A horizontal slider for an <see langword="int"/> value.</summary>
        </member>
        <member name="M:DivineFramework.UI.UISliderInt.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
        </member>
        <member name="T:DivineFramework.UI.UISliderFloat">
            <summary>A horizontal slider for a <see langword="float"/> value.</summary>
        </member>
        <member name="M:DivineFramework.UI.UISliderFloat.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
        </member>
        <member name="M:DivineFramework.UI.UISliderFloat.#ctor(DivineFramework.UI.UISlider{System.Single})">
            <DerivedFromParent>
		<summary>Creates a new instance of this class using an existing element as a template.</summary>
		<param name="element">The existing element to use as a template.</param>
	</DerivedFromParent>
        </member>
        <member name="T:DivineFramework.UI.UIButton">
            <summary>A base class for simple buttons</summary>
        </member>
        <member name="F:DivineFramework.UI.UIButton.onClick">
            <onClick>
			<summary>Delegate to be called when the button is clicked.</summary>
		</onClick>
        </member>
        <member name="F:DivineFramework.UI.UIButton.buttonHeight">
            <buttonHeight>
			<summary>The height of the button.</summary>
		</buttonHeight>
        </member>
        <member name="M:DivineFramework.UI.UIButton.#ctor(DivineFramework.UI.OnClickDelegate,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <UIButton>
		<Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
		<param name="onClick">The <see langword="delegate" /> to be called when the button is clicked.</param>
		<param name="height">
			<param name="buttonHeight">A fixed height for the button; optional.</param>
		</param>
	</UIButton>
        </member>
        <member name="M:DivineFramework.UI.UIButton.Initialize">
            <Initialize>
			<summary><inheritdoc /> Sets the <see cref="F:DivineFramework.UI.UIElement.height">height</see> of the button.</summary>
		</Initialize>
        </member>
        <member name="T:DivineFramework.UI.UIButtonResetable`1">
            <summary>A base class for buttons that implement <see cref="T:DivineFramework.UI.IResetable"/></summary>
        </member>
        <member name="F:DivineFramework.UI.UIButtonResetable`1.onClick">
            <onClick>
			<summary>Delegate to be called when the button is clicked.</summary>
		</onClick>
        </member>
        <member name="F:DivineFramework.UI.UIButtonResetable`1.buttonHeight">
            <buttonHeight>
			<summary>The height of the button.</summary>
		</buttonHeight>
        </member>
        <member name="M:DivineFramework.UI.UIButtonResetable`1.#ctor(DivineFramework.UI.UIButton)">
            <DerivedFromParent>
		<summary>Creates a new instance of this class using an existing element as a template.</summary>
		<param name="element">The existing element to use as a template.</param>
	</DerivedFromParent>
        </member>
        <member name="M:DivineFramework.UI.UIButtonResetable`1.#ctor(DivineFramework.UI.UIWithReference{`0})">
            <DerivedFromParent>
		<summary>Creates a new instance of this class using an existing element as a template.</summary>
		<param name="element">The existing element to use as a template.</param>
	</DerivedFromParent>
        </member>
        <member name="M:DivineFramework.UI.UIButtonResetable`1.Initialize">
            <Initialize>
			<summary><inheritdoc /> Sets the <see cref="F:DivineFramework.UI.UIElement.height">height</see> of the button.</summary>
		</Initialize>
        </member>
        <member name="T:DivineFramework.UI.UIButtonText">
            <summary>A button with a text label.</summary>
        </member>
        <member name="F:DivineFramework.UI.UIButtonText.labelKey">
            <ILabelled>
			<summary>A <see langword="delegate" /> to the function used to determine the plain text of the label.</summary>
		</ILabelled>
        </member>
        <member name="M:DivineFramework.UI.UIButtonText.#ctor(DivineFramework.UI.UIButton)">
            <DerivedFromParent>
		<summary>Creates a new instance of this class using an existing element as a template.</summary>
		<param name="element">The existing element to use as a template.</param>
	</DerivedFromParent>
        </member>
        <member name="M:DivineFramework.UI.UIButtonText.Draw(UnityEngine.Rect)">
            <Draw>
			<summary><inheritdoc /> Checks if the height of the element is still valid.</summary>
			<inheritdoc />
		</Draw>
        </member>
        <member name="T:DivineFramework.UI.UIButtonTextResetable`1">
            <summary>A button with a text label that implements <see cref="T:DivineFramework.UI.IResetable"/>.</summary>
        </member>
        <member name="F:DivineFramework.UI.UIButtonTextResetable`1.labelKey">
            <ILabelled>
			<summary>A <see langword="delegate" /> to the function used to determine the plain text of the label.</summary>
		</ILabelled>
        </member>
        <member name="M:DivineFramework.UI.UIButtonTextResetable`1.#ctor(DivineFramework.UI.UIButtonResetable{`0})">
            <DerivedFromParent>
		<summary>Creates a new instance of this class using an existing element as a template.</summary>
		<param name="element">The existing element to use as a template.</param>
	</DerivedFromParent>
        </member>
        <member name="M:DivineFramework.UI.UIButtonTextResetable`1.Draw(UnityEngine.Rect)">
            <Draw>
			<summary><inheritdoc /> Checks if the height of the element is still valid.</summary>
			<inheritdoc />
		</Draw>
        </member>
        <member name="T:DivineFramework.UI.UILine">
            <summary>An element that draws a horizontal line.</summary>
        </member>
        <member name="F:DivineFramework.UI.UILine.gapHeight">
            <summary><param name="gapHeight">How tall the element should be. The line will be drawn in the middle.</param></summary>
        </member>
        <member name="M:DivineFramework.UI.UILine.#ctor(System.Single,System.Nullable{System.Single},System.Nullable{System.Single})">
            <UILine>
		<Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
		<param name="gapHeight">How tall the element should be. The line will be drawn in the middle.</param>
	</UILine>
        </member>
        <member name="T:DivineFramework.UI.UISpace">
            <summary>A blank space.</summary>
        </member>
        <member name="M:DivineFramework.UI.UISpace.#ctor(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <UISpace>
		<Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
		<param name="height">A fixed height for the space; optional.</param>
	</UISpace>
        </member>
        <member name="T:DivineFramework.UI.UIWithReference`1">
            <UIWithReference>
		<summary>The base <see langword="class" /> for implementing <see cref="T:DivineFramework.UI.IResetable" /> and interacting with members of a <see cref="T:Verse.ModSettings" /> object.</summary>
		<typeparam name="U">The <see langword="type" /> of the setting being <see cref="F:DivineFramework.UI.UIWithReference`1.reference">referenced</see>.</typeparam>
	</UIWithReference>
        </member>
        <member name="F:DivineFramework.UI.UIWithReference`1.reference">
            <reference>
				<summary>A reference to the setting that this element uses.</summary>
			</reference>
        </member>
        <member name="F:DivineFramework.UI.UIWithReference`1.defaultValue">
            <defaultValue>
				<summary>Default value for the setting, used when resetting.</summary>
			</defaultValue>
        </member>
        <member name="M:DivineFramework.UI.UIWithReference`1.#ctor(DivineFramework.UI.UIElement)">
            <DerivedFromParent>
		<summary>Creates a new instance of this class using an existing element as a template.</summary>
		<param name="element">The existing element to use as a template.</param>
	</DerivedFromParent>
        </member>
        <member name="M:DivineFramework.UI.UIWithReference`1.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
        </member>
        <member name="M:DivineFramework.UI.UIWithReference`1.Reset">
            <summary>Set the <see cref="F:DivineFramework.UI.UIWithReference`1.reference">referenced</see> setting to its <see cref="F:DivineFramework.UI.UIWithReference`1.defaultValue">default value</see>.</summary>
        </member>
        <member name="T:DivineFramework.UI.ReferenceHolder`3">
            <inheritdoc cref="M:DivineFramework.UI.ElementExtensions.WithReference``4(``0,``1,System.String,``2,``3)"/>
        </member>
        <member name="M:DivineFramework.UI.ReferenceHolder`3.#ctor(`0)">
            <inheritdoc cref="M:DivineFramework.UI.ElementExtensions.WithReference``4(``0,``1,System.String,``2,``3)"/>
        </member>
        <member name="F:DivineFramework.UI.ReferenceHolder`3.settingsObject">
            <settingsObject>
				<summary>The <see cref="T:Verse.ModSettings" /> object that contains the referenced object.</summary>
			</settingsObject>
        </member>
        <member name="F:DivineFramework.UI.ReferenceHolder`3.collectionReference">
            <summary>A reference to a collection.</summary>
        </member>
        <member name="F:DivineFramework.UI.ReferenceHolder`3.dictionaryReference">
            <summary>A reference to a <see cref="T:System.Collections.Generic.KeyValuePair"/> collection, like a dictionary.</summary>
        </member>
        <member name="F:DivineFramework.UI.ReferenceHolder`3.collectionKey">
            <summary>The object for getting the value we actually want from the collection. Key for a dictionary, index for a list.</summary>
        </member>
        <member name="T:DivineFramework.UI.ReferenceHolder`2">
            <inheritdoc cref="M:DivineFramework.UI.ElementExtensions.WithReference``3(``0,``1,System.String,``2)"/>
        </member>
        <member name="M:DivineFramework.UI.ReferenceHolder`2.#ctor(`0)">
            <inheritdoc cref="M:DivineFramework.UI.ElementExtensions.WithReference``3(``0,``1,System.String,``2)"/>
        </member>
        <member name="F:DivineFramework.UI.ReferenceHolder`2.settingsObject">
            <settingsObject>
				<summary>The <see cref="T:Verse.ModSettings" /> object that contains the referenced object.</summary>
			</settingsObject>
        </member>
        <member name="F:DivineFramework.UI.ReferenceHolder`2.instanceReference">
            <summary>A reference to an instance field</summary>
        </member>
        <member name="F:DivineFramework.UI.ReferenceHolder`2.staticReference">
            <summary>A reference to a static field</summary>
        </member>
        <member name="T:DivineFramework.UI.ElementExtensions">
            <summary>
            Extension methods for manipulating UI elements.
            </summary>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithLabel``1(``0,DivineFramework.UI.LabelDelegate)">
            <WithLabel>
			<summary>Add a label to an element.</summary>
			<WithLabel>
			<param name="labelKey">A <see langword="delegate" /> to the function used to determine the plain text of the label.</param>
		</WithLabel>
			<Common>
			<param name="element">The original <paramref name="element" />.</param>
			<typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam>
			<returns>The original <paramref name="element" />.</returns>
		</Common>
		</WithLabel>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithTooltip``1(``0,DivineFramework.UI.LabelDelegate)">
            <WithTooltip>
			<summary>Add a tooltip to an element.</summary>
			<param name="tooltip"> <see langword="delegate" /> to the function used to determine the plain text of the tooltip.</param>
			<Common>
			<param name="element">The original <paramref name="element" />.</param>
			<typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam>
			<returns>The original <paramref name="element" />.</returns>
		</Common>
		</WithTooltip>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithReference``3(``0,``1,System.String,``2)">
            <WithReference name="GenericStatic">
			<summary>Add a reference to a <see langword="static" /> or instance field to an element. This overload will not change the <see langword="type" /> of the <paramref name="element" />.</summary>
			<WithReference>
			<param name="settings">The <see langword="object" /> that contains the reference.</param>
			<param name="name">The <see langword="string" /> identifier of the setting.</param>
			<param name="value">The current value of the referenced setting.</param>
		</WithReference>
			<WithoutReference>
			<typeparam name="T">The <see langword="type" /> of the <see langword="object" /> that contains the reference.</typeparam>
			<typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam>
		</WithoutReference>
			<Common>
			<param name="element">The original <paramref name="element" />.</param>
			<typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam>
			<returns>The original <paramref name="element" />.</returns>
		</Common>
		</WithReference>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithReference``4(``0,``1,System.String,``2,``3)">
            <WithReference name="GenericCollection">
			<summary>Add a reference to an element for a value that is inside a collection.This overload will not change the<see langword="type" /> of the <paramref name="element" />.</summary>
			<typeparam name="V"> The <see langword="type" /> of the <paramref name="key" />.</typeparam>
			<param name="key"> The index or key used to access the correct entry in the collection.</param>
			<WithReference>
			<param name="settings">The <see langword="object" /> that contains the reference.</param>
			<param name="name">The <see langword="string" /> identifier of the setting.</param>
			<param name="value">The current value of the referenced setting.</param>
		</WithReference>
			<Common>
			<param name="element">The original <paramref name="element" />.</param>
			<typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam>
			<returns>The original <paramref name="element" />.</returns>
		</Common>
			<WithoutReference>
			<typeparam name="T">The <see langword="type" /> of the <see langword="object" /> that contains the reference.</typeparam>
			<typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam>
		</WithoutReference>
		</WithReference>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.RegisterResetable``3(``0,DivineFramework.UI.SettingsHandler{``1},``2)">
            <RegisterResetable>
			<summary>Register this <paramref name="element" /> to be reset when the <paramref name="handler" /> is reset.</summary>
			<typeparam name="T">The subclass of <see cref="T:Verse.ModSettings" /> associated with the <paramref name="handler" />.</typeparam>
			<param name="handler">The <see cref="T:DivineFramework.UI.SettingsHandler`1" /> to register this element to.</param>
			<param name="defaultValue">The value to be used when the element is reset.</param>
			<Common>
			<param name="element">The original <paramref name="element" />.</param>
			<typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam>
			<returns>The original <paramref name="element" />.</returns>
		</Common>
			<typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam>
		</RegisterResetable>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.ButtonAction``1(``0,DivineFramework.UI.OnClickDelegate)">
            <ButtonAction>
			<summary>Add a <see cref="T:DivineFramework.UI.OnClickDelegate" /> to be called when the button is clicked.</summary>
			<param name="onClick"> The <see langword="delegate" /> to be called when the button is clicked.</param>
			<Common>
			<param name="element">The original <paramref name="element" />.</param>
			<typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam>
			<returns>The original <paramref name="element" />.</returns>
		</Common>
		</ButtonAction>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.Alignment(DivineFramework.UI.UICheckbox,UnityEngine.TextAlignment)">
            <Alignment>
			<summary>Set the alignment of a checkbox within its element</summary>
			<param name="alignment" />
			<returns>The original <paramref name="element" />.</returns>
			<param name="element">The original <paramref name="element" />.</param>
		</Alignment>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.MinMax``2(``0,``1,``1)">
            <MinMax>
			<summary>Add minimum and maximum values to an element.</summary>
			<typeparam name="U">The underlying numeric type of the referenced setting.</typeparam>
			<param name="min"> The minimum value.</param>
			<param name="max"> The maximum value.</param>
			<Common>
			<param name="element">The original <paramref name="element" />.</param>
			<typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam>
			<returns>The original <paramref name="element" />.</returns>
		</Common>
		</MinMax>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.HideWhen``1(``0,DivineFramework.UI.HideDelegate)">
            <HideWhen>
			<summary>Set a delegate to be used to determine if the element should be hidden.</summary>
			<param name="hideDelegate" />
			<Common>
			<param name="element">The original <paramref name="element" />.</param>
			<typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam>
			<returns>The original <paramref name="element" />.</returns>
		</Common>
		</HideWhen>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.RoundTo(DivineFramework.UI.UISlider{System.Single},System.Int32)">
            <RoundTo>
			<summary>Specify the number of decimal places to use when rounding the slider's value.</summary>
			<remarks>Default is 2, which will constrain a <see langword="float" /> value to two decimal places.</remarks>
			<param name="digits">How many decimal places to round to.</param>
			<Common>
			<param name="element">The original <paramref name="element" />.</param>
			<typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam>
			<returns>The original <paramref name="element" />.</returns>
		</Common>
		</RoundTo>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithPreDraw``1(``0,DivineFramework.UI.DrawDelegate)">
            <WithPreDraw>
			<summary>Add a <see langword="delegate" /> to be called before the element is drawn.</summary>
			<param name="drawDelegate" />
			<Common>
			<param name="element">The original <paramref name="element" />.</param>
			<typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam>
			<returns>The original <paramref name="element" />.</returns>
		</Common>
		</WithPreDraw>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithPostDraw``1(``0,DivineFramework.UI.DrawDelegate)">
            <WithPostDraw>
			<summary>Add a <see langword="delegate" /> to be called after the element is drawn.</summary>
			<param name="drawDelegate" />
			<Common>
			<param name="element">The original <paramref name="element" />.</param>
			<typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam>
			<returns>The original <paramref name="element" />.</returns>
		</Common>
		</WithPostDraw>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithLabel(DivineFramework.UI.UICheckbox,DivineFramework.UI.LabelDelegate)">
            <WithLabel name="UICheckbox">
			<summary>Add a label to a checkbox.</summary>
			<returns>A new <see cref="T:DivineFramework.UI.UICheckboxLabelled" /> element.</returns>
			<WithLabel>
			<param name="labelKey">A <see langword="delegate" /> to the function used to determine the plain text of the label.</param>
		</WithLabel>
			<param name="element">The original <paramref name="element" />.</param>
		</WithLabel>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithLabel(DivineFramework.UI.UIButton,DivineFramework.UI.LabelDelegate)">
            <WithLabel name="UIButton">
			<summary>Add a label to a button.</summary>
			<returns>A new <see cref="T:DivineFramework.UI.UIButtonText" /> element.</returns>
			<WithLabel>
			<param name="labelKey">A <see langword="delegate" /> to the function used to determine the plain text of the label.</param>
		</WithLabel>
			<param name="element">The original <paramref name="element" />.</param>
		</WithLabel>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithLabel``1(DivineFramework.UI.UIButtonResetable{``0},DivineFramework.UI.LabelDelegate)">
            <WithLabel name="UIButtonResetable">
			<summary>Add a label to a button that already has a reference.</summary>
			<returns>A new <see cref="T:DivineFramework.UI.UIButtonTextResetable`1" /> element.</returns>
			<WithLabel>
			<param name="labelKey">A <see langword="delegate" /> to the function used to determine the plain text of the label.</param>
		</WithLabel>
			<param name="element">The original <paramref name="element" />.</param>
			<typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam>
		</WithLabel>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithReference``1(DivineFramework.UI.UIInputSingleLine{System.Int32},``0,System.String,System.Int32)">
            <WithReference name="UIInputSingleLineInt">
			<summary>Add a reference to an input field.</summary>
			<returns>A new <see cref="T:DivineFramework.UI.UIInputInt" /> element.</returns>
			<WithReference>
			<param name="settings">The <see langword="object" /> that contains the reference.</param>
			<param name="name">The <see langword="string" /> identifier of the setting.</param>
			<param name="value">The current value of the referenced setting.</param>
		</WithReference>
			<typeparam name="T">The <see langword="type" /> of the <see langword="object" /> that contains the reference.</typeparam>
			<param name="element">The original <paramref name="element" />.</param>
		</WithReference>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithReference``1(DivineFramework.UI.UIInputSingleLine{System.Single},``0,System.String,System.Single)">
            <WithReference name="UIInputSingleLineFloat">
			<returns>A new <see cref="T:DivineFramework.UI.UIInputFloat" /> element.</returns>
			<inheritdoc cref="M:DivineFramework.UI.ElementExtensions.WithReference``1(DivineFramework.UI.UIInputSingleLine{System.Int32},``0,System.String,System.Int32)" />
		</WithReference>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithReference``2(DivineFramework.UI.UIButton,``0,System.String,``1)">
            <WithReference name="UIButton">
			<summary>Add a reference to a button.</summary>
			<returns>A new <see cref="T:DivineFramework.UI.UIButtonResetable`1" /> element.</returns>
			<WithReference>
			<param name="settings">The <see langword="object" /> that contains the reference.</param>
			<param name="name">The <see langword="string" /> identifier of the setting.</param>
			<param name="value">The current value of the referenced setting.</param>
		</WithReference>
			<param name="element">The original <paramref name="element" />.</param>
			<WithoutReference>
			<typeparam name="T">The <see langword="type" /> of the <see langword="object" /> that contains the reference.</typeparam>
			<typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam>
		</WithoutReference>
		</WithReference>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithIncrementButtons(DivineFramework.UI.UIInputInt,System.Int32)">
            <WithIncrementButtons>
			<summary>Add +/- buttons to a numeric input field.</summary>
			<param name="multiplier">The base amount to be added/subtracted with each button press.</param>
			<returns>A new <see cref="T:DivineFramework.UI.UIIntEntry" /> element.</returns>
			<param name="element">The original <paramref name="element" />.</param>
		</WithIncrementButtons>
        </member>
        <member name="T:DivineFramework.UI.Handler`2">
            <Main>
			<summary>Base class for holding and managing multiple UI objects.</summary>
			<typeparam name="T">The <see cref="T:Verse.ModSettings" /> subclass associated with this <see cref="T:DivineFramework.UI.Handler`2" />.</typeparam>
			<typeparam name="U">The <see langword="type" /> of objects being managed.</typeparam>
			<param name="setUpMethod"><inheritdoc cref="F:DivineFramework.UI.Handler`2.SetUpMethod" path="/summary" /></param>
		</Main>
        </member>
        <member name="M:DivineFramework.UI.Handler`2.#ctor(DivineFramework.UI.SetUpDelegate)">
            <Main>
			<summary>Base class for holding and managing multiple UI objects.</summary>
			<typeparam name="T">The <see cref="T:Verse.ModSettings" /> subclass associated with this <see cref="T:DivineFramework.UI.Handler`2" />.</typeparam>
			<typeparam name="U">The <see langword="type" /> of objects being managed.</typeparam>
			<param name="setUpMethod"><inheritdoc cref="F:DivineFramework.UI.Handler`2.SetUpMethod" path="/summary" /></param>
		</Main>
        </member>
        <member name="F:DivineFramework.UI.Handler`2.Items">
            <summary>The <see langword="List"/> of objects being managed.</summary>
        </member>
        <member name="F:DivineFramework.UI.Handler`2.SetUpMethod">
            <summary>A <see langword="delegate"/> to a method that will create and add the various objects needed to create the desired UI.</summary>
        </member>
        <member name="P:DivineFramework.UI.Handler`2.Initialized">
            <summary>Whether all containing items have been initialized.</summary>
        </member>
        <member name="M:DivineFramework.UI.Handler`2.Initialize">
            <summary>Calls <see cref="F:DivineFramework.UI.Handler`2.SetUpMethod"/> the first time this is called. Initializes all <see cref="F:DivineFramework.UI.Handler`2.Items"/>.</summary>
        </member>
        <member name="M:DivineFramework.UI.Handler`2.Add(`1,System.String)">
            <Add>
			<summary>Add an item to this <see cref="T:DivineFramework.UI.Handler`2" />.</summary>
			<param name="item">The <see cref="T:DivineFramework.UI.IItem" /> to add.</param>
			<param name="name">Optional name for the item. Must be unique within this <see cref="T:DivineFramework.UI.Handler`2" />.</param>
			<returns><see langword="true" /> if the item was added.</returns>
		</Add>
        </member>
        <member name="M:DivineFramework.UI.Handler`2.Clear">
            <summary>Clear the <see cref="F:DivineFramework.UI.Handler`2.Items"/> list.</summary>
        </member>
        <member name="M:DivineFramework.UI.Handler`2.SetUp(System.Boolean)">
            <SetUp>
			<summary>Calls <see cref="F:DivineFramework.UI.Handler`2.SetUpMethod" /> if it exists, but only once, unless <paramref name="force" /> is used.</summary>
			<param name="force">Whether to call <see cref="F:DivineFramework.UI.Handler`2.SetUpMethod" /> even if it's already been called previously. If you use this it is recommended to <see cref="M:DivineFramework.UI.Handler`2.Clear" /> the contents first.</param>
		</SetUp>
        </member>
        <member name="T:DivineFramework.UI.SettingsHandler`1">
            <Main>
			<summary>A class for holding and managing multiple <see cref="T:DivineFramework.UI.UIElement" />s.</summary>
			<typeparam name="T">The <see cref="T:Verse.ModSettings" /> subclass associated with this <see cref="T:DivineFramework.UI.SettingsHandler`1" />.</typeparam>
		</Main>
        </member>
        <member name="F:DivineFramework.UI.SettingsHandler`1.verticalSpacing">
            <summary>Space of the gap between rows.</summary>
        </member>
        <member name="F:DivineFramework.UI.SettingsHandler`1.width">
            <summary>The width for the settings handler that is passed to all rows.</summary>
        </member>
        <member name="F:DivineFramework.UI.SettingsHandler`1.height">
            <summary>The height of this <see cref="T:DivineFramework.UI.SettingsHandler`1"/> the last time it was drawn.</summary>
        </member>
        <member name="F:DivineFramework.UI.SettingsHandler`1.maxOneColumn">
            <summary><param name="maxOneColumn">Setting this to <see langword="true" /> means that a new column will only be made when a row specifically requests it. Hidden rows will still cause a new column in this case.<br />Setting this to <see langword="false" /> means that a new column will be made if a row will not fit in the <see cref="T:UnityEngine.Rect" /> of the <see cref="T:Verse.Listing" />.</param></summary>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.#ctor(System.Boolean,DivineFramework.UI.SetUpDelegate)">
            <Constructor>
			<param name="maxOneColumn">Setting this to <see langword="true" /> means that a new column will only be made when a row specifically requests it. Hidden rows will still cause a new column in this case.<br />Setting this to <see langword="false" /> means that a new column will be made if a row will not fit in the <see cref="T:UnityEngine.Rect" /> of the <see cref="T:Verse.Listing" />.</param>
			<param name="setUpMethod"><inheritdoc cref="F:DivineFramework.UI.Handler`2.SetUpMethod" path="/summary" /></param>
		</Constructor>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.AddContainer``1(``0,System.String,System.Boolean)">
            <AddContainer>
			<summary>Add an existing <typeparamref name="TContainer" /> to the <see cref="T:DivineFramework.UI.SettingsHandler`1" />.</summary>
			<typeparam name="TContainer" />
			<param name="container">The <typeparamref name="TContainer" /> to add.</param>
			<param name="name">An optional name for the row, which can be used to retrieve this element later. Must be unique among all rows within this <see cref="T:DivineFramework.UI.SettingsHandler`1" />.</param>
			<param name="newColumn">Whether to start a new column before drawing this row. Has no affect on nested containers.</param>
			<returns>The original <typeparamref name="TContainer" />.</returns>
		</AddContainer>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.RegisterNewRow(System.String,System.Single,System.Boolean)">
            <RegisterNewRow>
			<summary>Add a new row to the <see cref="T:DivineFramework.UI.SettingsHandler`1" />. This row is a <see cref="T:DivineFramework.UI.UIRow" /> to hold elements that will be drawn horizontally.</summary>
			<param name="name">An optional name for the row, which can be used to retrieve this element later. Must be unique among all rows within this <see cref="T:DivineFramework.UI.SettingsHandler`1" />.</param>
			<param name="gap">The spacing between elements in the row.</param>
			<param name="newColumn">Whether to start a new column before drawing this row. Has no affect on nested containers.</param>
			<returns>The <see cref="T:DivineFramework.UI.UIRow" /> for the new row.</returns>
		</RegisterNewRow>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.RegisterNewSection(System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean)">
            <RegisterNewSection>
			<summary>Add a new row to the <see cref="T:DivineFramework.UI.SettingsHandler`1" />. This row is a <see cref="T:DivineFramework.UI.UISection" /> to hold elements that will be drawn vertically inside a section box.</summary>
			<param name="spacing">The spacing between elements in the section.</param>
			<param name="sectionBorder">The space between the border of the section and the <see cref="T:UnityEngine.Rect" /> where the elements are drawn, for the top and sides only.</param>
			<param name="bottomBorder">Same as <paramref name="sectionBorder" /> but for the bottom of the section.</param>
			<returns>The <see cref="T:DivineFramework.UI.UISection" /> for the new row.</returns>
			<param name="name">An optional name for the row, which can be used to retrieve this element later. Must be unique among all rows within this <see cref="T:DivineFramework.UI.SettingsHandler`1" />.</param>
			<param name="newColumn">Whether to start a new column before drawing this row. Has no affect on nested containers.</param>
		</RegisterNewSection>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.RegisterNewColumn(System.String,System.Nullable{System.Single},System.Boolean)">
            <RegisterNewColumn>
			<summary>Add a new row to the <see cref="T:DivineFramework.UI.SettingsHandler`1" />. This row is a <see cref="T:DivineFramework.UI.UIColumn" /> to hold elements that will be drawn vertically.</summary>
			<param name="spacing">The spacing between elements in the section.</param>
			<returns>The <see cref="T:DivineFramework.UI.UIColumn" /> for the new row.</returns>
			<param name="name">An optional name for the row, which can be used to retrieve this element later. Must be unique among all rows within this <see cref="T:DivineFramework.UI.SettingsHandler`1" />.</param>
			<param name="newColumn">Whether to start a new column before drawing this row. Has no affect on nested containers.</param>
		</RegisterNewColumn>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.Reset">
            <summary>Reset all registered elements to their <see cref="F:DivineFramework.UI.UIWithReference`1.defaultValue">default values.</see></summary>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.RegisterResetable(DivineFramework.UI.UIElement)">
            <RegisterResetable>
			<summary>Register an element that implements <see cref="T:DivineFramework.UI.IResetable" /> so it will be reset when <see cref="M:DivineFramework.UI.SettingsHandler`1.Reset" /> is called.</summary>
			<param name="element">The element to reset.</param>
		</RegisterResetable>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.AddGap(System.Single,System.String)">
            <AddGap>
			<summary>Add a row that's just an empty gap.</summary>
			<param name="height">How tall the gap should be.</param>
			<returns>The <see cref="T:DivineFramework.UI.UIRow" /> for the new row.</returns>
			<param name="name">An optional name for the row, which can be used to retrieve this element later. Must be unique among all rows within this <see cref="T:DivineFramework.UI.SettingsHandler`1" />.</param>
		</AddGap>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.AddLine(System.Single,System.String)">
            <AddLine>
			<summary>Add a row with a horizontal line</summary>
			<param name="gapHeight">The height of the element. The line will be drawn in the middle.</param>
			<returns>The <see cref="T:DivineFramework.UI.UIRow" /> for the new row.</returns>
			<param name="name">An optional name for the row, which can be used to retrieve this element later. Must be unique among all rows within this <see cref="T:DivineFramework.UI.SettingsHandler`1" />.</param>
		</AddLine>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.Draw(Verse.Listing)">
            <Draw>
			<summary>Draw all registered rows in the order they were added.</summary>
			<param name="list">The <see cref="T:Verse.Listing" /> where the rows should be drawn.</param>
		</Draw>
        </member>
        <member name="T:DivineFramework.UI.TabbedHandler`1">
            <inheritdoc/><summary>A class for creating a tabbed UI page.</summary>
        </member>
        <member name="P:DivineFramework.UI.TabbedHandler`1.CurTab">
            <summary>The currently displayed <see cref="T:DivineFramework.UI.Tab`1"/>.</summary>
        </member>
        <member name="M:DivineFramework.UI.TabbedHandler`1.#ctor(DivineFramework.UI.SetUpDelegate)">
            <param name="setUpMethod"><inheritdoc cref="F:DivineFramework.UI.Handler`2.SetUpMethod" path="/summary" /></param>
        </member>
        <member name="M:DivineFramework.UI.TabbedHandler`1.Initialize">
            <summary>Calls <see cref="F:DivineFramework.UI.Handler`2.SetUpMethod"/> the first time this is called. Does not initialize <see cref="F:DivineFramework.UI.Handler`2.Items"/> since the <see cref="T:Verse.Listing"/> needed to set them up properly may not have been created yet.</summary>
        </member>
        <member name="M:DivineFramework.UI.TabbedHandler`1.AddTab(DivineFramework.UI.SettingsHandler{`0},System.String,DivineFramework.UI.OnClickDelegate,System.Func{System.Boolean})">
            <AddTab>
			<summary>Add a new tab to the <see cref="T:DivineFramework.UI.TabbedHandler`1" />. Each tab has a <see cref="T:DivineFramework.UI.SettingsHandler`1" /> that will be drawn when that tab is selected.</summary>
			<param name="handler">The <see cref="T:DivineFramework.UI.SettingsHandler`1" /> to draw when this tab is selected.</param>
			<param name="name">A unique name for the tab which can be used to retrieve this tab later. Will be used as the label for the tab if another label is not provided.</param>
			<param name="clickedAction">An optional delegate to be called when the tab is clicked. Defaults to just setting the selected tab to be this tab.</param>
			<param name="selected">An optional delegate to determine if the tab is selected. Defaults to just checking if the selected tab is the same as this tab.</param>
			<returns><see langword="true" /> if the tab was added.</returns>
		</AddTab>
        </member>
        <member name="M:DivineFramework.UI.TabbedHandler`1.DrawTabs(UnityEngine.Rect,UnityEngine.Rect@)">
            <DrawTabs>
			<summary>Draws the tabs at the top of the page in the order they were added.</summary>
			<param name="canvas">The <see cref="T:UnityEngine.Rect" /> for the entire space of the page.</param>
			<param name="innerRect">The <see cref="T:UnityEngine.Rect" /> you should use to create the <see cref="T:Verse.Listing" /> for the page's content.</param>
		</DrawTabs>
        </member>
        <member name="M:DivineFramework.UI.TabbedHandler`1.DrawContents(Verse.Listing)">
            <DrawContents>
			<summary>Draw the contents of the selected tab.</summary>
			<param name="listing">The <see cref="T:Verse.Listing" /> to use.</param>
		</DrawContents>
        </member>
        <member name="T:DivineFramework.UI.Tab`1">
            <Main>
			<summary>A <see cref="T:Verse.TabRecord" /> that has a <see cref="T:DivineFramework.UI.SettingsHandler`1" /> attached.</summary>
			<typeparam name="T">The <see cref="T:Verse.ModSettings" /> subclass associated with the tab's <see cref="F:DivineFramework.UI.Tab`1.handler">handler</see>.</typeparam>
		</Main>
        </member>
        <member name="F:DivineFramework.UI.Tab`1.handler">
            <summary>The <see cref="T:DivineFramework.UI.SettingsHandler`1"/> associated with this tab.</summary>
        </member>
        <member name="F:DivineFramework.UI.Tab`1.scrollPos">
            <summary>Used to keep track of the scroll position for this tab.</summary>
            <remarks>Should be passed by <see langword="ref"/> to <see cref="M:DivineFramework.UI.Listing_ScrollView.BeginScrollView(UnityEngine.Rect,System.Single,UnityEngine.Vector2@,System.Single)"/>.</remarks>
        </member>
        <member name="M:DivineFramework.UI.Tab`1.#ctor(System.String,System.Action,System.Func{System.Boolean},DivineFramework.UI.SettingsHandler{`0})">
            <Tab>
		<summary>Creates a new <see cref="T:Verse.TabRecord" /> to use in a <see cref="T:DivineFramework.UI.TabbedHandler`1" />.</summary>
		<param name="name">The name of the <see cref="T:DivineFramework.UI.Tab`1" />. Must be unique within its <see cref="T:DivineFramework.UI.TabbedHandler`1" />. Will be used as the label for the <see cref="T:Verse.TabRecord" /> unless it is overridden by <see cref="M:DivineFramework.UI.Tab`1.WithLabel(System.String)" />.</param>
		<param name="onClick">The <see cref="T:System.Action" /> to perform when the tab is clicked.</param>
		<param name="selectedGetter">A <see cref="T:System.Func`1" /> used to determine if the tab is active.</param>
		<param name="handler">The <see cref="T:DivineFramework.UI.SettingsHandler`1" /> associated with this tab.</param>
	</Tab>
        </member>
        <member name="M:DivineFramework.UI.Tab`1.Initialize">
            <summary>Initializes the <see cref="F:DivineFramework.UI.Tab`1.handler"/>.</summary>
        </member>
        <member name="M:DivineFramework.UI.Tab`1.GetTip">
            <summary>Get the <see cref="F:DivineFramework.UI.Tab`1.tooltip"/>, if it exists.</summary>
        </member>
        <member name="M:DivineFramework.UI.Tab`1.WithLabel(System.String)">
            <WithLabel>
			<summary>Add a label to the tab that is different from the tab's <see cref="P:DivineFramework.UI.Tab`1.Name">name</see>.</summary>
			<param name="label" />
			<returns>The original <see cref="T:DivineFramework.UI.Tab`1" />.</returns>
		</WithLabel>
        </member>
        <member name="M:DivineFramework.UI.Tab`1.WithTooltip(DivineFramework.UI.LabelDelegate)">
            <WithTooltip>
			<summary>Add a tooltip to the tab.</summary>
			<returns>The original <see cref="T:DivineFramework.UI.Tab`1" />.</returns>
			<param name="tooltip"> <see langword="delegate" /> to the function used to determine the plain text of the tooltip.</param>
		</WithTooltip>
        </member>
        <member name="M:DivineFramework.UI.Tab`1.DrawContents(Verse.Listing)">
            <summary>Just calls <see cref="M:DivineFramework.UI.SettingsHandler`1.Draw(Verse.Listing)"/> on the <see cref="F:DivineFramework.UI.Tab`1.handler"/>.</summary>
        </member>
        <member name="T:DivineFramework.UI.Listing_ScrollView">
            <Listing_ScrollView>
		<summary>A <see cref="T:Verse.Listing" /> to make using scrollbars less confusing.</summary>
		<remarks>All you need to do is make a new <see cref="T:DivineFramework.UI.Listing_ScrollView" />, call <see cref="M:DivineFramework.UI.Listing_ScrollView.BeginScrollView(UnityEngine.Rect,System.Single,UnityEngine.Vector2@,System.Single)" />, use the resulting <see cref="T:Verse.Listing_Standard" /> for all your lising needs, then call <see cref="M:DivineFramework.UI.Listing_ScrollView.End" />.</remarks>
	</Listing_ScrollView>
        </member>
        <member name="F:DivineFramework.UI.Listing_ScrollView.endingX">
            <endingX>
		<summary>The final x value of the inner listing after <see cref="M:DivineFramework.UI.Listing_ScrollView.End" /> was called.</summary>
	</endingX>
        </member>
        <member name="M:DivineFramework.UI.Listing_ScrollView.BeginScrollView(UnityEngine.Rect,System.Single,UnityEngine.Vector2@,System.Single)">
            <BeginScrollView>
		<summary>Use this instead of <see cref="M:Verse.Listing_Standard.Begin(UnityEngine.Rect)" />. If the <paramref name="height" /> is larger than the <paramref name="canvasRect" />, a scrollbar will be used.</summary>
		<param name="canvasRect">The <see cref="T:UnityEngine.Rect" /> for the visible space on the screen.</param>
		<param name="height">
			<para>The height of the inner <see cref="T:UnityEngine.Rect" /> needed to display all contents. There are a few ways to calculate the correct height, depending on your setup.</para>
			<para>If you have set columns, you can start with 0f and then save <see cref="P:Verse.Listing.MaxColumnHeightSeen" /> after everything is drawn. That will cause the height to automatically adjust if the needed height changes.</para>
			<para>If you are letting the <see cref="T:Verse.Listing" /> decide when to start a new column, you can use <see cref="F:DivineFramework.UI.SettingsHandler`1.height" /> to determine the needed height based on how many columns you expect.</para>
		</param>
		<param name="scrollPosition">Used to keep track of how far the window is scrolled in either direction. Should be a variable that is initialized to <see cref="P:UnityEngine.Vector2.zero" />.</param>
		<param name="width">
			<para>Optional width for the inner <see cref="T:UnityEngine.Rect" />. If this is larger than the width of the <paramref name="canvasRect" />, a horizontal scrollbar will be used.</para>
			<para>You can save <see cref="F:DivineFramework.UI.Listing_ScrollView.endingX" /> after everything is drawn and then use that for the width. That will cause the width to automatically adjust if the needed width changes.</para>
		</param>
		<returns>The inner <see cref="T:Verse.Listing_Standard" />. This is what you will actually use.</returns>
	</BeginScrollView>
        </member>
        <member name="M:DivineFramework.UI.Listing_ScrollView.End">
            <End>
		<summary>Close everything when you're done.</summary>
	</End>
        </member>
        <member name="T:DivineFramework.UI.IItem">
            <summary>Interface for classes that can go in an <see cref="T:DivineFramework.UI.IContainer`1"/>.</summary>
        </member>
        <member name="P:DivineFramework.UI.IItem.Name">
            <summary>A unique string used to retrieve this item from its container.</summary>
        </member>
        <member name="P:DivineFramework.UI.IItem.ErrorPrefix">
            <summary>A prefix to add to any error messages generated by this item.</summary>
        </member>
        <member name="M:DivineFramework.UI.IItem.Initialize">
            <summary>Initialize any values that need to be set after all other items are added to the parent <see cref="T:DivineFramework.UI.IContainer`1"/>.</summary>
        </member>
        <member name="M:DivineFramework.UI.IItem.Validate(System.String@)">
            <Validate>
				<summary>Make sure that all required data is present.</summary>
				<param name="reasons">List of reasons that validation failed, to be used in error messages.</param>
				<returns><see langword="false" /> if any critical data is null.</returns>
			</Validate>
        </member>
        <member name="M:DivineFramework.UI.IUIElement.Register(System.Single)">
            <Register>
				<summary>Register the element within its container.</summary>
				<param name="parentWidth">The actual width of the parent container.</param>
			</Register>
        </member>
        <member name="M:DivineFramework.UI.IUIElement.Draw(UnityEngine.Rect)">
            <Draw>
				<summary>Draw the element.</summary>
				<param name="rect">The <see cref="T:UnityEngine.Rect" /> used to draw the element, calculated by the parent container.</param>
			</Draw>
        </member>
        <member name="T:DivineFramework.UI.IContainer`1">
            <Main>
				<summary>Interface for classes that contain a list of <see cref="T:DivineFramework.UI.IItem" />s.</summary>
				<typeparam name="U">The <see langword="type" /> of <see cref="T:DivineFramework.UI.IItem" />s in the list.</typeparam>
			</Main>
        </member>
        <member name="M:DivineFramework.UI.IContainer`1.Initialize">
            <summary>Do things that need to be done after all other items are added to this <see cref="T:DivineFramework.UI.IContainer`1"/>.</summary>
        </member>
        <member name="M:DivineFramework.UI.IContainer`1.Add(`0,System.String)">
            <Add>
				<summary>Add an item to the container.</summary>
				<param name="item">The item to add.</param>
				<param name="name">Optional name for the element. Must be unique within this container.</param>
			</Add>
        </member>
        <member name="M:DivineFramework.UI.IContainer`1.Clear">
            <Clear>
				<summary>Remove all items from the container.</summary>
			</Clear>
        </member>
        <member name="M:DivineFramework.UI.IContainer`1.GetNamed(System.String)">
            <GetNamed>
				<summary>Retrieve a specific named <see cref="T:DivineFramework.UI.IItem" /> that has been registered to this <see cref="T:DivineFramework.UI.IContainer`1" />.</summary>
				<param name="name">The name of the element to retrieve.</param>
				<returns>The named item, or <see langword="null" /> if none was found.</returns>
			</GetNamed>
        </member>
        <member name="T:DivineFramework.UI.IReference`1">
            <Main>
				<summary>An interface for reference holders.</summary>
				<typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam>
			</Main>
        </member>
        <member name="P:DivineFramework.UI.IReference`1.Value">
            <summary>The value of the referenced object.</summary>
        </member>
        <member name="M:DivineFramework.UI.IReference`1.Validate(System.String@)">
            <inheritdoc cref="M:DivineFramework.UI.UIElement.Validate(System.String@)"/>
        </member>
        <member name="T:DivineFramework.UI.ILabelled">
            <summary>Interface for elements with labels.</summary>
        </member>
        <member name="P:DivineFramework.UI.ILabelled.Label">
            <summary>Property to get the text of the label.</summary>
        </member>
        <member name="P:DivineFramework.UI.ILabelled.SetLabel">
            <summary>Set the <see langword="delegate"/> that will be used to determine the text of the label.</summary>
        </member>
        <member name="T:DivineFramework.UI.IMinMax`1">
            <Main>
				<summary>Interface for elements with numeric min and max values.</summary>
				<typeparam name="U">The numeric type of the associated setting.</typeparam>
			</Main>
        </member>
        <member name="P:DivineFramework.UI.IMinMax`1.Min">
            <summary>The minimum value for this setting.</summary>
        </member>
        <member name="P:DivineFramework.UI.IMinMax`1.Max">
            <summary>The maximum value for this setting.</summary>
        </member>
        <member name="T:DivineFramework.UI.NewElement">
            <summary>Methods for creating new UI elements.</summary>
        </member>
        <member name="M:DivineFramework.UI.NewElement.InputLine``1(System.Nullable{System.Single},System.Nullable{System.Single})">
            <InputLine>
			<summary>Create an input field for entering numbers or text.</summary>
			<returns>The newly created <see cref="T:DivineFramework.UI.UIInputSingleLine`1" />.</returns>
			<typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam>
			<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
		</InputLine>
        </member>
        <member name="M:DivineFramework.UI.NewElement.Button(DivineFramework.UI.OnClickDelegate,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <Button>
			<summary>Create a basic button.</summary>
			<returns>The newly created <see cref="T:DivineFramework.UI.UIButton" />.</returns>
			<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
			<param name="onClick">The <see langword="delegate" /> to be called when the button is clicked.</param>
			<param name="buttonHeight">A fixed height for the button; optional.</param>
		</Button>
        </member>
        <member name="M:DivineFramework.UI.NewElement.Checkbox(System.Nullable{System.Single},System.Nullable{System.Single})">
            <Checkbox>
			<summary>Create a toggle for a <see langword="bool" /> value that will show a green check mark or a red X.</summary>
			<returns>The newly created <see cref="T:DivineFramework.UI.UICheckbox" />.</returns>
			<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
		</Checkbox>
        </member>
        <member name="M:DivineFramework.UI.NewElement.Slider``1(System.Nullable{System.Single},System.Nullable{System.Single})">
            <Slider>
			<summary>Create a horizontal slider for a numeric value.</summary>
			<returns>The newly created <see cref="T:DivineFramework.UI.UISlider`1" />.</returns>
			<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
			<typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam>
		</Slider>
        </member>
        <member name="M:DivineFramework.UI.NewElement.Range``2(System.Nullable{``1},System.Nullable{System.Single},System.Nullable{System.Single})">
            <Range>
			<summary>Create a slider for an <see cref="T:Verse.IntRange" /> or <see cref="T:Verse.FloatRange" />.</summary>
			<param name="minRange">Minimum difference between the min and max of the range; optional</param>
			<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
			<ForRange>
			<typeparam name="T">The <see langword="type" /> of the setting being referenced. Must be <see cref="T:Verse.IntRange" /> or <see cref="T:Verse.FloatRange" />.</typeparam>
			<typeparam name="U">The corresponding numeric type of <typeparamref name="T" />: <see cref="T:System.Int32" /> or <see cref="T:System.Single" />.</typeparam>
		</ForRange>
		</Range>
        </member>
        <member name="M:DivineFramework.UI.NewElement.Label(DivineFramework.UI.LabelDelegate,System.Nullable{System.Single},System.Nullable{System.Single})">
            <Label>
			<summary>Create a basic label.</summary>
			<returns>The newly created <see cref="T:DivineFramework.UI.UILabel" />.</returns>
			<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
			<WithLabel>
			<param name="labelKey">A <see langword="delegate" /> to the function used to determine the plain text of the label.</param>
		</WithLabel>
		</Label>
        </member>
        <member name="T:DivineFramework.UI.UIElement">
            <summary>The base <see langword="class"/> for implementing <see cref="T:DivineFramework.UI.IUIElement"/>.</summary>
        </member>
        <member name="F:DivineFramework.UI.UIElement.actualWidth">
            <summary>The actual width of the element to be used for drawing.</summary>
        </member>
        <member name="F:DivineFramework.UI.UIElement.relativeWidth">
            <summary>Width of the element relative to its container, used to determine <see cref="F:DivineFramework.UI.UIElement.actualWidth">actual width</see>.</summary>
        </member>
        <member name="F:DivineFramework.UI.UIElement.fixedWidth">
            <summary>A set width to use for the <see cref="F:DivineFramework.UI.UIElement.actualWidth">actual width</see>.</summary>
        </member>
        <member name="F:DivineFramework.UI.UIElement.height">
            <summary>The height required to display the element properly.</summary>
        </member>
        <member name="F:DivineFramework.UI.UIElement.sizeValid">
            <summary/>
        </member>
        <member name="P:DivineFramework.UI.UIElement.Width">
            <summary>Property to access the <see cref="F:DivineFramework.UI.UIElement.actualWidth">actual width</see> of the element.</summary>
        </member>
        <member name="P:DivineFramework.UI.UIElement.Height">
            <summary>Property to access the current height of an element.</summary>
        </member>
        <member name="P:DivineFramework.UI.UIElement.IsHidden">
            <summary>Whether the element should be drawn or not.</summary>
        </member>
        <member name="P:DivineFramework.UI.UIElement.SizeValid">
            <summary>Used to determine if the element needs to be re-initialized because the desired sizing has changed.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIElement.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
        </member>
        <member name="M:DivineFramework.UI.UIElement.Register(System.Single)">
            <Register>
			<summary><inheritdoc /> The <see cref="P:DivineFramework.UI.UIElement.Width">actual width</see> is calculated if <see cref="F:DivineFramework.UI.UIElement.relativeWidth">relative width</see> or <see cref="F:DivineFramework.UI.UIElement.fixedWidth">fixed width</see> is set.</summary>
			<param name="parentWidth">Width of the parent container, used to calculate <see cref="P:DivineFramework.UI.UIElement.Width">actual width</see>.</param>
		</Register>
        </member>
        <member name="M:DivineFramework.UI.UIElement.Hide(System.Boolean)">
            <Hide>
			<summary>Set the element to be hidden.</summary>
			<param name="value" />
		</Hide>
        </member>
        <member name="M:DivineFramework.UI.UIElement.AddName(System.String)">
            <AddName>
			<summary>Add a name to the element.</summary>
			<remarks>Only call this after checking that the name is unique.</remarks>
			<param name="name">The name to add to the element.</param>
		</AddName>
        </member>
        <member name="M:DivineFramework.UI.UIElement.DrawTooltip(UnityEngine.Rect)">
            <DrawTooltipWithHighlight>
			<summary><summary>Draws a tooltip if the mouse is hovered over the <paramref name="rect" />.</summary> Also draws a highlight over the whole <paramref name="rect" />.</summary>
			<DrawTooltip>
			<summary>Draws a tooltip if the mouse is hovered over the <paramref name="rect" />.</summary>
			<param name="rect">The <see cref="T:UnityEngine.Rect" /> for the tooltip area.</param>
		</DrawTooltip>
		</DrawTooltipWithHighlight>
        </member>
        <member name="M:DivineFramework.UI.UIElement.ToString">
            <inheritdoc/>
        </member>
        <member name="T:DivineFramework.UI.UIIntEntry">
            <summary>An element that allows the user to input an <see cref="T:System.Int32"/> and has buttons to increase/decrease the value by a base <see cref="F:DivineFramework.UI.UIIntEntry.multiplier">amount</see> and that amount x10. Optional min and max values. Can use shift click and ctrl click to increase the amount.</summary>
        </member>
        <member name="F:DivineFramework.UI.UIIntEntry.multiplier">
            <summary><param name="multiplier">The base amount for the buttons.</param></summary>
        </member>
        <member name="M:DivineFramework.UI.UIIntEntry.#ctor(DivineFramework.UI.UIInputInt,System.Int32)">
            <UIIntEntry>
		<DerivedFromParent>
		<summary>Creates a new instance of this class using an existing element as a template.</summary>
		<param name="element">The existing element to use as a template.</param>
	</DerivedFromParent>
		<param name="multiplier">The base amount for the buttons.</param>
	</UIIntEntry>
        </member>
        <member name="T:DivineFramework.UI.UILabel">
            <summary>A simple text element.</summary>
        </member>
        <member name="F:DivineFramework.UI.UILabel.labelKey">
            <ILabelled>
			<summary>A <see langword="delegate" /> to the function used to determine the plain text of the label.</summary>
		</ILabelled>
        </member>
        <member name="M:DivineFramework.UI.UILabel.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
        </member>
        <member name="M:DivineFramework.UI.UILabel.Initialize">
            <Initialize>
			<summary><inheritdoc /> <see cref="F:DivineFramework.UI.UIElement.height">Height</see> is calculated so that the entire label will be visible.</summary>
		</Initialize>
        </member>
        <member name="M:DivineFramework.UI.UILabel.Draw(UnityEngine.Rect)">
            <Draw>
			<summary><inheritdoc /> Checks if the height of the element is still valid.</summary>
			<inheritdoc />
		</Draw>
        </member>
        <member name="M:DivineFramework.UI.UILabel.DrawTooltip(UnityEngine.Rect)">
            <DrawTooltip>
			<summary>Draws a tooltip if the mouse is hovered over the <paramref name="rect" />.</summary>
			<param name="rect">The <see cref="T:UnityEngine.Rect" /> for the tooltip area.</param>
		</DrawTooltip>
        </member>
        <member name="T:DivineFramework.UI.UIHeader">
            <summary>A <see cref="T:DivineFramework.UI.UILabel"/> but bigger.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIHeader.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <Common>
		<summary />
		<Common>
			<param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
			<param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
		</Common>
	</Common>
        </member>
        <member name="T:DivineFramework.LogUtil">
            <summary>Methods for logging to the console.</summary>
        </member>
        <member name="M:DivineFramework.LogUtil.Message(System.String,System.Boolean)">
            <LogUtil>
		<summary>Calls the base <see cref="T:Verse.Log" /> version with a prefix identifying the calling mod.</summary>
		<param name="message">The text of the log message.</param>
		<param name="debugOnly">Whether this message should only be logged if debug logging is active in the calling mod.<br />Defaults to <see langword="false" />, meaning the message will always be logged.</param>
	</LogUtil>
        </member>
        <member name="M:DivineFramework.LogUtil.Warning(System.String,System.Boolean)">
            <LogUtil>
		<summary>Calls the base <see cref="T:Verse.Log" /> version with a prefix identifying the calling mod.</summary>
		<param name="message">The text of the log message.</param>
		<param name="debugOnly">Whether this message should only be logged if debug logging is active in the calling mod.<br />Defaults to <see langword="false" />, meaning the message will always be logged.</param>
	</LogUtil>
        </member>
        <member name="M:DivineFramework.LogUtil.WarningOnce(System.String,System.Int32,System.Boolean)">
            <LogUtilWithKey>
		<LogUtil>
		<summary>Calls the base <see cref="T:Verse.Log" /> version with a prefix identifying the calling mod.</summary>
		<param name="message">The text of the log message.</param>
		<param name="debugOnly">Whether this message should only be logged if debug logging is active in the calling mod.<br />Defaults to <see langword="false" />, meaning the message will always be logged.</param>
	</LogUtil>
		<param name="key">A number used to determine if this message has already been logged. Should be unique for each usage.</param>
	</LogUtilWithKey>
        </member>
        <member name="M:DivineFramework.LogUtil.Error(System.String,System.Boolean)">
            <LogUtil>
		<summary>Calls the base <see cref="T:Verse.Log" /> version with a prefix identifying the calling mod.</summary>
		<param name="message">The text of the log message.</param>
		<param name="debugOnly">Whether this message should only be logged if debug logging is active in the calling mod.<br />Defaults to <see langword="false" />, meaning the message will always be logged.</param>
	</LogUtil>
        </member>
        <member name="M:DivineFramework.LogUtil.ErrorOnce(System.String,System.Int32,System.Boolean)">
            <LogUtilWithKey>
		<LogUtil>
		<summary>Calls the base <see cref="T:Verse.Log" /> version with a prefix identifying the calling mod.</summary>
		<param name="message">The text of the log message.</param>
		<param name="debugOnly">Whether this message should only be logged if debug logging is active in the calling mod.<br />Defaults to <see langword="false" />, meaning the message will always be logged.</param>
	</LogUtil>
		<param name="key">A number used to determine if this message has already been logged. Should be unique for each usage.</param>
	</LogUtilWithKey>
        </member>
        <member name="T:DivineFramework.LogToFile">
            <summary>Logs messages to a custom log file on the desktop.</summary>
        </member>
        <member name="M:DivineFramework.LogToFile.#ctor(System.String,System.Boolean)">
            <Constructor>
			<summary>Initializes a new instance of the <see cref="T:DivineFramework.LogToFile" /> class.</summary>
			<remarks>You should only have one instance of this class per log file. Make sure to call <see cref="M:DivineFramework.LogToFile.Close" /> when finished.</remarks>
			<param name="fileName">The name of the log file. Will be placed on the desktop.</param>
			<param name="autoFlush">If set to <see langword="true" />, the data will be written to the file after every write operation. If set to <see langword="false" />, the data will be written to the file only when the buffer is full.</param>
		</Constructor>
        </member>
        <member name="M:DivineFramework.LogToFile.Log(System.String)">
            <Log>
			<summary>Logs a message to the desktop log file.</summary>
			<param name="message">The text of the log message.</param>
		</Log>
        </member>
        <member name="M:DivineFramework.LogToFile.Close">
            <Close>
			<summary>Stops writing to the file and frees up resources.</summary>
			<remarks>Use this when you've finished logging. The file will be opened again if <see cref="M:DivineFramework.LogToFile.Log(System.String)" /> is used.</remarks>
		</Close>
        </member>
        <member name="T:DivineFramework.ModManagement">
            <summary/>
        </member>
        <member name="M:DivineFramework.ModManagement.RegisterMod(System.String,System.String,System.Version,System.String,System.Func{System.Boolean})">
            <RegisterMod>
			<summary>Register your mod with the framework; this enables certain logging features and checks that the correct version of the framework is loaded.</summary>
			<remarks>The recommended place to call this is in the constructor of your <see cref="T:Verse.Mod" /> class, or in the constructor of a class with the <see cref="T:Verse.StaticConstructorOnStartup" /> attribute.</remarks>
			<param name="translationKey">A translation key for the name of the mod. Used for player facing messages.</param>
			<param name="assemblyName">The name of the assembly in the mod that references DivineFramework.<br />Recommended usage:<code>typeof(ClassFromYourAssembly).Assembly.GetName().Name</code>
			</param>
			<param name="versionNeeded">The version of DivineFramework required by the mod.</param>
			<param name="wrapMessage">Text to prefix logging messages; optional, will default to <paramref name="assemblyName" />.</param>
			<param name="debugDelegate">A delegate to determine if debug logging is active for this mod; optional, will default to always <see langword="true" />, meaning everything will be logged.</param>
		</RegisterMod>
        </member>
    </members>
</doc>
