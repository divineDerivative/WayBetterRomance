<?xml version="1.0"?>
<doc>
    <assembly>
        <name>0DivineFramework</name>
    </assembly>
    <members>
        <member name="T:DivineFramework.UI.Heights">
            <summary>Constant heights for various elements, to help with calculations on the implementation side.</summary>
        </member>
        <member name="T:DivineFramework.UI.LabelDelegate">
            <summary>A <see langword="delegate" /> for creating a text label.</summary><returns>A <see cref="T:Verse.TaggedString" /> with the text of the label.</returns>
        </member>
        <member name="T:DivineFramework.UI.OnClickDelegate">
            <summary>A <see langword="delegate" /> that will be called when a button is pressed.</summary>
        </member>
        <member name="T:DivineFramework.UI.HideDelegate">
            <summary>A <see langword="delegate" /> used to determine if an element should be hidden or disabled.</summary>
        </member>
        <member name="T:DivineFramework.UI.SetUpDelegate">
            <summary>A <see langword="delegate" /> used to set up a <see cref="T:DivineFramework.UI.Handler`2" />.</summary>
        </member>
        <member name="T:DivineFramework.UI.DrawDelegate">
            <summary>A <see langword="delegate" /> that can be called before or after drawing an element.</summary>
        </member>
        <member name="T:DivineFramework.UI.ValueGetter`1">
            <summary>Delegate for getting a value of type <typeparamref name="U" />.</summary>
        </member>
        <member name="T:DivineFramework.UI.ValueSetter`1">
            <summary>Delegate for setting a value of type <typeparamref name="U" />.</summary>
        </member>
        <member name="M:DivineFramework.UI.DrawingUtility.DrawVerticalElement(Verse.Listing,DivineFramework.UI.UIElement,System.String,System.Boolean@,System.Single,System.Single@)">
            <summary>Common method for drawing elements in a vertical setting, like a <see cref="T:DivineFramework.UI.SettingsHandler`1" /> or <see cref="T:DivineFramework.UI.UIColumn" />.</summary><param name="listing">The <see cref="T:Verse.Listing" /> used to draw the element.</param><param name="element">The element to be drawn</param><param name="errorPrefix">The <see cref="P:DivineFramework.UI.UIElement.ErrorPrefix" /> from the <paramref name="element" />.</param><param name="invalidate">Whether the <paramref name="element" /> is still valid.</param><param name="spacing">The vertical spacing between elements.</param><param name="height">The running total of vertical space used by all drawn elements.</param>
        </member>
        <member name="T:DivineFramework.UI.UICheckbox">
            <summary>A simple checkbox to toggle a setting.</summary>
        </member>
        <member name="M:DivineFramework.UI.UICheckbox.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <include file="../../Docs/NewElement.xml" path="doc/NewElement/Common/*" />
        </member>
        <member name="P:DivineFramework.UI.UICheckbox.RealReference">
            <summary>A reference to the setting that this element uses.</summary>
        </member>
        <member name="M:DivineFramework.UI.UICheckbox.Initialize">
            <summary><inheritdoc /> Sets the <see cref="F:DivineFramework.UI.UIElement.height">height</see> to match the size of the checkbox.</summary>
        </member>
        <member name="T:DivineFramework.UI.UICheckboxLabeled">
            <summary>A checkbox with a label.</summary>
        </member>
        <member name="M:DivineFramework.UI.UICheckboxLabeled.#ctor(DivineFramework.UI.UICheckbox)">
            <summary>Creates a new instance of this class using an existing element as a template.</summary><param name="element">The existing element to use as a template.</param>
        </member>
        <member name="T:DivineFramework.UI.UIColumn">
            <summary>A <see cref="T:DivineFramework.UI.UIElement"/> that can contain other elements. Elements are drawn vertically in the order they were added to the column.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIColumn.#ctor(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <param name="spacing">The spacing between elements in the column.</param><include file="../../../Docs/NewElement.xml" path="doc/NewElement/Common/*" />
        </member>
        <member name="M:DivineFramework.UI.UIColumn.Draw(UnityEngine.Rect)">
            <summary>Draws all inner <see cref="F:DivineFramework.UI.UIContainer.elements">elements</see> in the order they were added to the column.</summary><remarks>Hidden elements are not drawn. If the size of any element is not valid, or the sizing of the column has changed, the column is marked as invalid.</remarks>
        </member>
        <member name="M:DivineFramework.UI.UIColumn.Draw(Verse.Listing_Standard,System.Single@)">
            <summary>An inner draw method that draws all elements in the column using the <paramref name="listing" /> created in <see cref="M:DivineFramework.UI.UIColumn.Draw(UnityEngine.Rect)" />.</summary><param name="listing">The <see cref="T:Verse.Listing_Standard" /> used to draw each element.</param><param name="height">The total height of the column after drawing all elements.</param>
        </member>
        <member name="T:DivineFramework.UI.UIContainer">
            <summary>Base class for implementing <see cref="T:DivineFramework.UI.IContainer`1"/>; a <see cref="T:DivineFramework.UI.UIElement"/> that can contain other elements.</summary>
        </member>
        <member name="F:DivineFramework.UI.UIContainer.elements">
            <summary>The elements that will be drawn when this container is drawn.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param><param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.Add(DivineFramework.UI.UIElement,System.String)">
            <summary>Add an element to this container.</summary><remarks>Only add an element after you have finished modifying it. Some of these operations change the <see langword="type" />, resulting in a new <see langword="object" /> being created. Only add the element at the end to be sure the completed object is what is added to the container.</remarks><param name="element">The element to add.</param><param name="name">Optional name for the element. Must be unique within this container.</param><returns><see langword="true" /> if the element was added.</returns>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.CalculateWidths">
            <summary>Assign widths to all elements in this container.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.CalculateHeights">
            <summary>Assign heights to all elements in this container.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.AddLabel(DivineFramework.UI.LabelDelegate,System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <summary>Add an element for a text label.</summary><include file="../../../Docs/ElementExtensions.xml" path="doc/MultiUse/WithLabel/*" /><include file="../../../Docs/NewElement.xml" path="doc/NewElement/Common/*" /><include file="../../../Docs/UIElements.xml" path="doc/UIContainer/AddElement/param[@name=&quot;name&quot;]" /><returns>The newly created <see cref="T:DivineFramework.UI.UILabel" />.</returns>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.AddHeader(DivineFramework.UI.LabelDelegate,System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <summary>Add an element for a text label.</summary><include file="../../../Docs/ElementExtensions.xml" path="doc/MultiUse/WithLabel/*" /><include file="../../../Docs/NewElement.xml" path="doc/NewElement/Common/*" /><include file="../../../Docs/UIElements.xml" path="doc/UIContainer/AddElement/param[@name=&quot;name&quot;]" /><returns>The newly created <see cref="T:DivineFramework.UI.UILabel" />.</returns>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.AddSpace(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <summary>Add an element for a blank space.</summary><param name="height">A fixed height for the space; optional.</param><include file="../../../Docs/NewElement.xml" path="doc/NewElement/Common/*" /><include file="../../../Docs/UIElements.xml" path="doc/UIContainer/AddElement/param[@name=&quot;name&quot;]" /><returns>The newly created <see cref="T:DivineFramework.UI.UISpace" />.</returns>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.AddLine(System.Single,System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <summary>Add a horizontal line</summary><param name="gapHeight">The height of the element. The line will be drawn in the middle.</param><include file="../../../Docs/NewElement.xml" path="doc/NewElement/Common/*" /><include file="../../../Docs/UIElements.xml" path="doc/UIContainer/AddElement/param[@name=&quot;name&quot;]" /><returns>The newly created <see cref="T:DivineFramework.UI.UILine" />.</returns>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.AddResetButton``1(DivineFramework.UI.SettingsHandler{``0},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <summary>Add an element for a button that will reset all values registered to the <paramref name="handler" />.</summary><param name="handler">The <see cref="T:DivineFramework.UI.SettingsHandler`1" /> to reset.</param><include file="../../../Docs/NewElement.xml" path="doc/NewElement/Button/param[@name=&quot;buttonHeight&quot;]" /><include file="../../../Docs/NewElement.xml" path="doc/NewElement/Common/*" /><include file="../../../Docs/UIElements.xml" path="doc/UIContainer/AddElement/param[@name=&quot;name&quot;]" /><include file="../../../Docs/Handlers.xml" path="doc/SettingsHandler/Main/typeparam[@name=&quot;T&quot;]" /><returns>The newly created <see cref="T:DivineFramework.UI.UIButtonText" />.</returns>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.AddRow(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <summary>Add an inner <see cref="T:DivineFramework.UI.UIRow" /> to hold other elements.</summary><param name="gap">The spacing between elements in the row; optional, will default to <see cref="F:Verse.Listing.ColumnSpacing" />.</param><include file="../../../Docs/NewElement.xml" path="doc/NewElement/Common/*" /><include file="../../../Docs/UIElements.xml" path="doc/UIContainer/AddElement/param[@name=&quot;name&quot;]" /><returns>The newly created <see cref="T:DivineFramework.UI.UIRow" />.</returns>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.AddColumn(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <summary>Add an inner <see cref="T:DivineFramework.UI.UIColumn" /> to hold other elements.</summary><param name="spacing">The vertical spacing between elements in the column; optional, will default to 2f.</param><include file="../../../Docs/NewElement.xml" path="doc/NewElement/Common/*" /><include file="../../../Docs/UIElements.xml" path="doc/UIContainer/AddElement/param[@name=&quot;name&quot;]" /><returns>The newly created <see cref="T:DivineFramework.UI.UIColumn" />.</returns>
        </member>
        <member name="M:DivineFramework.UI.UIContainer.AddSection(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <summary>Add an inner <see cref="T:DivineFramework.UI.UISection" /> to hold other elements.</summary><include file="../../../Docs/Handlers.xml" path="doc/SettingsHandler/RegisterNewSection/param[@name=&quot;spacing&quot;]" /><include file="../../../Docs/Handlers.xml" path="doc/SettingsHandler/RegisterNewSection/param[@name=&quot;sectionBorder&quot;]" /><include file="../../../Docs/Handlers.xml" path="doc/SettingsHandler/RegisterNewSection/param[@name=&quot;bottomBorder&quot;]" /><include file="../../../Docs/NewElement.xml" path="doc/NewElement/Common/*" /><include file="../../../Docs/UIElements.xml" path="doc/UIContainer/AddElement/param[@name=&quot;name&quot;]" /><returns>The newly created <see cref="T:DivineFramework.UI.UISection" />.</returns>
        </member>
        <member name="T:DivineFramework.UI.UIRow">
            <summary>A <see cref="T:DivineFramework.UI.UIElement"/> that can contain other elements. Elements are drawn horizontally in the order they were added to the row.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIRow.#ctor(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <include file="../../../Docs/NewElement.xml" path="doc/NewElement/Common/*" /><include file="../../../Docs/Handlers.xml" path="doc/SettingsHandler/RegisterNewRow/param[@name=&quot;gap&quot;]" />
        </member>
        <member name="M:DivineFramework.UI.UIRow.Initialize">
            <summary><inheritdoc/> Determines width for any inner <see cref="F:DivineFramework.UI.UIContainer.elements">elements</see> that have no <see cref="P:DivineFramework.UI.UIElement.Width">actual width</see> assigned yet.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIRow.Draw(UnityEngine.Rect)">
            <summary>Draws all inner <see cref="F:DivineFramework.UI.UIContainer.elements">elements</see> in the order they were added to the row.</summary><remarks>Hidden elements are not drawn, but the space they would have taken up is still used. If the size of any element is not valid, the row is marked as invalid.</remarks>
        </member>
        <member name="T:DivineFramework.UI.UISection">
            <summary>A <see cref="T:DivineFramework.UI.UIElement"/> for a section box that can contain other elements. Elements are drawn vertically in the order they were added to the section.</summary>
        </member>
        <member name="M:DivineFramework.UI.UISection.#ctor(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <include file="../../../Docs/Handlers.xml" path="doc/SettingsHandler/RegisterNewSection/param[@name=&quot;sectionBorder&quot;]" /><include file="../../../Docs/Handlers.xml" path="doc/SettingsHandler/RegisterNewSection/param[@name=&quot;bottomBorder&quot;]" /><param name="spacing">The spacing between elements in the section.</param><include file="../../../Docs/NewElement.xml" path="doc/NewElement/Common/*" />
        </member>
        <member name="M:DivineFramework.UI.UISection.Draw(UnityEngine.Rect)">
            <summary>Draws all inner <see cref="F:DivineFramework.UI.UIContainer.elements">elements</see> in the order they were added to the section.</summary><remarks>Hidden elements are not drawn. If the size of any element is not valid, or the sizing of the section has changed, the section is marked as invalid.</remarks>
        </member>
        <member name="T:DivineFramework.UI.UIInput`1">
            <summary>Base class for elements with an input field.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIInput`1.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <include file="../../Docs/NewElement.xml" path="doc/NewElement/Common/*" />
        </member>
        <member name="P:DivineFramework.UI.UIInput`1.RealReference">
            <summary>A reference to the setting that this element uses.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIInput`1.Reset">
            <summary><inheritdoc /> Also resets the buffer for input fields.</summary>
        </member>
        <member name="T:DivineFramework.UI.UIInputSingleLine`1">
            <summary>Base class for elements with a single line input field.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIInputSingleLine`1.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <include file="../../Docs/NewElement.xml" path="doc/NewElement/Common/*" />
        </member>
        <member name="M:DivineFramework.UI.UIInputSingleLine`1.#ctor(DivineFramework.UI.UIInput{`0})">
            <summary>Creates a new instance of this class using an existing element as a template.</summary><param name="element">The existing element to use as a template.</param>
        </member>
        <member name="M:DivineFramework.UI.UIInputSingleLine`1.Initialize">
            <summary><inheritdoc/> Sets the <see cref="F:DivineFramework.UI.UIElement.height">height</see> to be the same as one line of text.</summary>
        </member>
        <member name="T:DivineFramework.UI.UIInputInt">
            <summary>An element that allows the user to input an <see cref="T:System.Int32" />. Optional min and max values.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIInputInt.#ctor(DivineFramework.UI.UIInputSingleLine{System.Int32})">
            <summary>Creates a new instance of this class using an existing element as a template.</summary><param name="element">The existing element to use as a template.</param>
        </member>
        <member name="T:DivineFramework.UI.UIInputFloat">
            <summary>An element that allows the user to input a <see langword="float" />. Optional min and max values.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIInputFloat.#ctor(DivineFramework.UI.UIInputSingleLine{System.Single})">
            <summary>Creates a new instance of this class using an existing element as a template.</summary><param name="element">The existing element to use as a template.</param>
        </member>
        <member name="T:DivineFramework.UI.UIRange`2">
            <summary>Base class for a range slider.</summary><include file="../../Docs/Common.xml" path="doc/GenericType/ForRange/*" />
        </member>
        <member name="M:DivineFramework.UI.UIRange`2.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <include file="../../Docs/NewElement.xml" path="doc/NewElement/Common/*" />
        </member>
        <member name="P:DivineFramework.UI.UIRange`2.RealReference">
            <summary>A reference to the setting that this element uses.</summary>
        </member>
        <member name="T:DivineFramework.UI.UIIntRange">
            <summary>A slider for an <see cref="T:Verse.IntRange" />.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIIntRange.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <include file="../../Docs/NewElement.xml" path="doc/NewElement/Common/*" />
        </member>
        <member name="M:DivineFramework.UI.UIIntRange.#ctor(DivineFramework.UI.UIRange{Verse.IntRange,System.Int32})">
            <summary>Creates a new instance of this class using an existing element as a template.</summary><param name="element">The existing element to use as a template.</param>
        </member>
        <member name="T:DivineFramework.UI.UIFloatRange">
            <summary>A slider for a <see cref="T:Verse.FloatRange" /></summary>
        </member>
        <member name="M:DivineFramework.UI.UIFloatRange.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <include file="../../Docs/NewElement.xml" path="doc/NewElement/Common/*" />
        </member>
        <member name="M:DivineFramework.UI.UIFloatRange.#ctor(DivineFramework.UI.UIRange{Verse.FloatRange,System.Single})">
            <summary>Creates a new instance of this class using an existing element as a template.</summary><param name="element">The existing element to use as a template.</param>
        </member>
        <member name="T:DivineFramework.UI.UISlider`1">
            <summary>Base class for a horizontal slider.</summary><include file="../../Docs/Common.xml" path="doc/GenericType/WithoutReference/typeparam[@name=&quot;U&quot;]" />
        </member>
        <member name="M:DivineFramework.UI.UISlider`1.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <include file="../../Docs/NewElement.xml" path="doc/NewElement/Common/*" />
        </member>
        <member name="P:DivineFramework.UI.UISlider`1.RealReference">
            <summary>A reference to the setting that this element uses.</summary>
        </member>
        <member name="T:DivineFramework.UI.UISliderInt">
            <summary>A horizontal slider for an <see langword="int" /> value.</summary>
        </member>
        <member name="M:DivineFramework.UI.UISliderInt.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <include file="../../Docs/NewElement.xml" path="doc/NewElement/Common/*" />
        </member>
        <member name="M:DivineFramework.UI.UISliderInt.#ctor(DivineFramework.UI.UISlider{System.Int32})">
            <summary>Creates a new instance of this class using an existing element as a template.</summary><param name="element">The existing element to use as a template.</param>
        </member>
        <member name="T:DivineFramework.UI.UISliderFloat">
            <summary>A horizontal slider for a <see langword="float" /> value.</summary>
        </member>
        <member name="M:DivineFramework.UI.UISliderFloat.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <include file="../../Docs/NewElement.xml" path="doc/NewElement/Common/*" />
        </member>
        <member name="M:DivineFramework.UI.UISliderFloat.#ctor(DivineFramework.UI.UISlider{System.Single})">
            <summary>Creates a new instance of this class using an existing element as a template.</summary><param name="element">The existing element to use as a template.</param>
        </member>
        <member name="T:DivineFramework.UI.UIButton">
            <summary>A base class for simple buttons.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIButton.#ctor(DivineFramework.UI.OnClickDelegate,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <include file="../../Docs/NewElement.xml" path="doc/NewElement/Button/param[@name=&quot;onClick&quot;]" /><include file="../../Docs/Constructors.xml" path="doc/Common/*" /><param name="height">A fixed height for the button; optional.</param>
        </member>
        <member name="M:DivineFramework.UI.UIButton.#ctor(DivineFramework.UI.UIButton)">
            <summary>Creates a new instance of this class using an existing element as a template.</summary><param name="element">The existing element to use as a template.</param>
        </member>
        <member name="M:DivineFramework.UI.UIButton.Initialize">
            <summary><inheritdoc/> Sets the <see cref="F:DivineFramework.UI.UIElement.height">height</see> of the button.</summary>
        </member>
        <member name="T:DivineFramework.UI.UIButtonReference`1">
            <summary>A base class for buttons that implement <see cref="T:DivineFramework.UI.IReferenceBase" /></summary>
        </member>
        <member name="M:DivineFramework.UI.UIButtonReference`1.#ctor(DivineFramework.UI.UIButton)">
            <summary>Creates a new instance of this class using an existing element as a template.</summary><param name="element">The existing element to use as a template.</param>
        </member>
        <member name="M:DivineFramework.UI.UIButtonReference`1.#ctor(DivineFramework.UI.UIButtonReference{`0})">
            <summary>Creates a new instance of this class using an existing element as a template.</summary><param name="element">The existing element to use as a template.</param>
        </member>
        <member name="P:DivineFramework.UI.UIButtonReference`1.RealReference">
            <summary>A reference to the setting that this element uses.</summary>
        </member>
        <member name="T:DivineFramework.UI.UIButtonText">
            <summary>A button with a text label.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIButtonText.#ctor(DivineFramework.UI.UIButton)">
            <DerivedFromParent>
		<summary>Creates a new instance of this class using an existing element as a template.</summary>
		<param name="element">The existing element to use as a template.</param>
	</DerivedFromParent>
        </member>
        <member name="M:DivineFramework.UI.UIButtonText.Draw(UnityEngine.Rect)">
            <summary><inheritdoc/> Checks if the height of the element is still valid.</summary> <inheritdoc/>
        </member>
        <member name="T:DivineFramework.UI.UIButtonTextReference`1">
            <summary>A button with a text label that implements <see cref="T:DivineFramework.UI.IReference`1" />.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIButtonTextReference`1.#ctor(DivineFramework.UI.UIButtonReference{`0})">
            <summary>Creates a new instance of this class using an existing element as a template.</summary><param name="element">The existing element to use as a template.</param>
        </member>
        <member name="M:DivineFramework.UI.UIButtonTextReference`1.#ctor(DivineFramework.UI.UIButtonText)">
            <summary>Creates a new instance of this class using an existing element as a template.</summary><param name="element">The existing element to use as a template.</param>
        </member>
        <member name="P:DivineFramework.UI.UIButtonTextReference`1.RealReference">
            <summary>A reference to the setting that this element uses.</summary>
        </member>
        <member name="T:DivineFramework.UI.UILine">
            <summary>An element that draws a horizontal line.</summary>
        </member>
        <member name="F:DivineFramework.UI.UILine.gapHeight">
            <summary><param name="gapHeight">How tall the element should be. The line will be drawn in the middle.</param></summary>
        </member>
        <member name="M:DivineFramework.UI.UILine.#ctor(System.Single,System.Nullable{System.Single},System.Nullable{System.Single})">
            <param name="gapHeight">How tall the element should be. The line will be drawn in the middle.</param><include file="../../Docs/Constructors.xml" path="doc/Common/*" />
        </member>
        <member name="T:DivineFramework.UI.UISpace">
            <summary>A blank space.</summary>
        </member>
        <member name="M:DivineFramework.UI.UISpace.#ctor(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <include file="../../Docs/Constructors.xml" path="doc/Common/*" /><include file="../../Docs/UIElements.xml" path="doc/UIContainer/AddSpace/param[@name=&quot;height&quot;]" />
        </member>
        <member name="T:DivineFramework.UI.ReferenceHolder`3">
            <summary>A class that can be used to hold a reference to a value in a collection.</summary><include file="../../Docs/ElementExtensions.xml" path="doc/MultiUse/WithReference/param[@name=&quot;settings&quot;]" /><include file="../../Docs/Common.xml" path="doc/GenericType/WithoutReference/*" /><include file="../../Docs/ElementExtensions.xml" path="doc/ElementExtensions/WithReference[@name=&quot;GenericCollection&quot;]/typeparam[@name=&quot;V&quot;]" />
        </member>
        <member name="M:DivineFramework.UI.ReferenceHolder`3.#ctor(`0)">
            <summary>A class that can be used to hold a reference to a value in a collection.</summary><include file="../../Docs/ElementExtensions.xml" path="doc/MultiUse/WithReference/param[@name=&quot;settings&quot;]" /><include file="../../Docs/Common.xml" path="doc/GenericType/WithoutReference/*" /><include file="../../Docs/ElementExtensions.xml" path="doc/ElementExtensions/WithReference[@name=&quot;GenericCollection&quot;]/typeparam[@name=&quot;V&quot;]" />
        </member>
        <member name="F:DivineFramework.UI.ReferenceHolder`3.settingsObject">
            <summary>The <typeparamref name="T" /> object that contains the referenced object.</summary>
        </member>
        <member name="F:DivineFramework.UI.ReferenceHolder`3.collectionReference">
            <summary>A reference to a collection.</summary>
        </member>
        <member name="F:DivineFramework.UI.ReferenceHolder`3.dictionaryReference">
            <summary>A reference to a <see cref="T:System.Collections.Generic.KeyValuePair"/> collection, like a dictionary.</summary>
        </member>
        <member name="F:DivineFramework.UI.ReferenceHolder`3.collectionKey">
            <summary>The object for getting the value we actually want from the collection. Key for a dictionary, index for a list.</summary>
        </member>
        <member name="T:DivineFramework.UI.ReferenceHolder`2">
            <summary>A class that can be used to hold references to a static or instance field of a class.</summary><include file="../../Docs/ElementExtensions.xml" path="doc/MultiUse/WithReference/param[@name=&quot;settings&quot;]" /><include file="../../Docs/Common.xml" path="doc/GenericType/WithoutReference/*" />
        </member>
        <member name="M:DivineFramework.UI.ReferenceHolder`2.#ctor(`0)">
            <summary>A class that can be used to hold references to a static or instance field of a class.</summary><include file="../../Docs/ElementExtensions.xml" path="doc/MultiUse/WithReference/param[@name=&quot;settings&quot;]" /><include file="../../Docs/Common.xml" path="doc/GenericType/WithoutReference/*" />
        </member>
        <member name="F:DivineFramework.UI.ReferenceHolder`2.settingsObject">
            <summary>The <typeparamref name="T" /> object that contains the referenced object.</summary>
        </member>
        <member name="F:DivineFramework.UI.ReferenceHolder`2.instanceReference">
            <summary>A reference to an instance field.</summary>
        </member>
        <member name="F:DivineFramework.UI.ReferenceHolder`2.staticReference">
            <summary>A reference to a static field.</summary>
        </member>
        <member name="T:DivineFramework.UI.ReferenceHolder`1">
            <summary>A class that can be used interact with a value via a <see cref="T:DivineFramework.UI.ValueGetter`1" /> and <see cref="T:DivineFramework.UI.ValueSetter`1" />.</summary><include file="../../Docs/Common.xml" path="doc/GenericType/WithoutReference/typeparam[@name=&quot;U&quot;]" />
        </member>
        <member name="P:DivineFramework.UI.ReferenceHolder`1.Getter">
            <summary>A <see langword="delegate"/> for getting the value associated with this element, if it should not be referenced directly.</summary>
        </member>
        <member name="P:DivineFramework.UI.ReferenceHolder`1.Setter">
            <summary>A <see langword="delegate"/> for setting the value associated with this element, if it should not be set directly.</summary>
        </member>
        <member name="T:DivineFramework.UI.ElementExtensions">
            <summary>Extension methods for manipulating UI elements.</summary>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithLabel``1(``0,DivineFramework.UI.LabelDelegate)">
            <summary>Add a label to an element.</summary><param name="element">The original <paramref name="element" />.</param><typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam><returns>The original <paramref name="element" />.</returns><param name="labelKey">A <see langword="delegate" /> function used to determine the plain text of the label.</param>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.FitToText``1(``0,System.Boolean)">
            <summary>Set <see cref="P:DivineFramework.UI.ILabeled.FitToText" /> on an <see cref="T:DivineFramework.UI.ILabeled" /> element.</summary><param name="element">The original <paramref name="element" />.</param><typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam><returns>The original <paramref name="element" />.</returns><param name="value">The value of <see cref="P:DivineFramework.UI.ILabeled.FitToText" />.</param>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithTooltip``1(``0,DivineFramework.UI.LabelDelegate)">
            <summary>Add a tooltip to an element.</summary><param name="element">The original <paramref name="element" />.</param><typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam><returns>The original <paramref name="element" />.</returns><param name="tooltip"> <see langword="delegate" /> function used to determine the plain text of the tooltip.</param>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithReference``3(``0,``1,System.String,``2)">
            <summary>Add a reference to a <see langword="static" /> or instance field to an element. This overload will not change the <see langword="type" /> of the <paramref name="element" />.</summary><param name="element">The original <paramref name="element" />.</param><typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam><returns>The original <paramref name="element" />.</returns><param name="settings">The <see langword="object" /> that contains the reference.</param><param name="name">The <see langword="string" /> identifier of the setting.</param><param name="value">The current value of the referenced setting.</param><typeparam name="T">The <see langword="type" /> of the <see langword="object" /> that contains the reference.</typeparam><typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithGetter``2(``0,DivineFramework.UI.ValueGetter{``1})">
            <summary>Add a custom getter for the value associated with this element. For use when the referenced field should not be accessed directly.</summary><param name="element">The original <paramref name="element" />.</param><typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam><returns>The original <paramref name="element" />.</returns><param name="getter">The delegate to be used.</param><typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithSetter``2(``0,DivineFramework.UI.ValueSetter{``1})">
            <summary>Add a custom setter for the value associated with this element. For use when the referenced field should not be accessed directly.</summary><param name="element">The original <paramref name="element" />.</param><typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam><returns>The original <paramref name="element" />.</returns><param name="setter">The delegate to be used.</param><typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithReference``4(``0,``1,System.String,``2,``3)">
            <summary>Add a reference to an element for a value that is inside a collection. This overload will not change the <see langword="type" /> of the <paramref name="element" />.</summary><param name="element">The original <paramref name="element" />.</param><typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam><returns>The original <paramref name="element" />.</returns><param name="settings">The <see langword="object" /> that contains the collection.</param><param name="name">The <see langword="string" /> identifier of the collection.</param><param name="value">The current value of the referenced setting.</param><param name="key"> The index or key used to access the correct entry in the collection.</param><typeparam name="T">The <see langword="type" /> of <paramref cref="!:settings" />.</typeparam><typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam><typeparam name="V"> The <see langword="type" /> of the <paramref name="key" />.</typeparam>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.RegisterResettable``3(``0,DivineFramework.UI.SettingsHandler{``1},``2)">
            <summary>Register this <paramref name="element" /> to be reset when the <paramref name="handler" /> is reset.</summary><param name="element">The original <paramref name="element" />.</param><typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam><returns>The original <paramref name="element" />.</returns><param name="handler">The <see cref="T:DivineFramework.UI.SettingsHandler`1" /> to register this element to.</param><param name="defaultValue">The value to be used when the element is reset.</param><typeparam name="T">The class associated with the <paramref name="handler" />.</typeparam><typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.ButtonAction``1(``0,DivineFramework.UI.OnClickDelegate)">
            <summary>Add an <see cref="T:DivineFramework.UI.OnClickDelegate" /> to be called when the button is clicked.</summary><param name="element">The original <paramref name="element" />.</param><typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam><returns>The original <paramref name="element" />.</returns><param name="onClick"> The <see langword="delegate" /> to be called when the button is clicked.</param>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.Alignment(DivineFramework.UI.UICheckbox,UnityEngine.TextAlignment)">
            <summary>Set the alignment of a checkbox within its element.</summary><param name="element">The original <paramref name="element" />.</param><param name="alignment">A <see cref="T:UnityEngine.TextAlignment" /> value.</param><returns>The original <paramref name="element" />.</returns>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.MinMax``2(``0,``1,``1)">
            <summary>Add minimum and maximum values to an element.</summary><param name="element">The original <paramref name="element" />.</param><typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam><returns>The original <paramref name="element" />.</returns><typeparam name="U">The underlying numeric type of the referenced setting.</typeparam><param name="min"> The minimum value.</param><param name="max"> The maximum value.</param>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.HideWhen``1(``0,DivineFramework.UI.HideDelegate)">
            <summary>Set a delegate to be used to determine if the element should be hidden.</summary><param name="element">The original <paramref name="element" />.</param><typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam><returns>The original <paramref name="element" />.</returns><param name="hideDelegate">The <see cref="!:delegate" /> to add.</param>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.RoundTo(DivineFramework.UI.UISlider{System.Single},System.Int32)">
            <summary>Specify the number of decimal places to use when rounding the slider's value.</summary><remarks>Default is 2, which will constrain a <see langword="float" /> value to two decimal places.</remarks><param name="element">The original <paramref name="element" />.</param><typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam><returns>The original <paramref name="element" />.</returns><param name="digits">How many decimal places to round to.</param>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithPreDraw``1(``0,DivineFramework.UI.DrawDelegate)">
            <summary>Add a <see langword="delegate" /> to be called before the element is drawn.</summary><param name="element">The original <paramref name="element" />.</param><typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam><returns>The original <paramref name="element" />.</returns><param name="drawDelegate">The <see cref="!:delegate" /> to add.</param>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithPostDraw``1(``0,DivineFramework.UI.DrawDelegate)">
            <summary>Add a <see langword="delegate" /> to be called after the element is drawn.</summary><param name="element">The original <paramref name="element" />.</param><typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam><returns>The original <paramref name="element" />.</returns><param name="drawDelegate">The <see cref="!:delegate" /> to add.</param>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.DisableWhen(DivineFramework.UI.UICheckbox,DivineFramework.UI.HideDelegate)">
            <summary>Add a <see langword="delegate" /> to be used to determine if the checkbox should be disabled.</summary><param name="element">The original <paramref name="element" />.</param><typeparam name="TElement">The <see langword="type" /> of the <paramref name="element" />.</typeparam><returns>The original <paramref name="element" />.</returns><param name="disabled">The <see cref="!:delegate" /> to add.</param>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithLabel(DivineFramework.UI.UICheckbox,DivineFramework.UI.LabelDelegate)">
            <summary>Add a label to a checkbox.</summary><returns>A new <see cref="T:DivineFramework.UI.UICheckboxLabeled" /> element.</returns><param name="element">The original <paramref name="element" />.</param><param name="labelKey">A <see langword="delegate" /> function used to determine the plain text of the label.</param>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithLabel(DivineFramework.UI.UIButton,DivineFramework.UI.LabelDelegate)">
            <summary>Add a label to a button.</summary><returns>A new <see cref="T:DivineFramework.UI.UIButtonText" /> element.</returns><param name="element">The original <paramref name="element" />.</param><param name="labelKey">A <see langword="delegate" /> function used to determine the plain text of the label.</param>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithLabel``1(DivineFramework.UI.UIButtonReference{``0},DivineFramework.UI.LabelDelegate)">
            <summary>Add a label to a button that already has a reference.</summary><returns>A new <see cref="T:DivineFramework.UI.UIButtonTextReference`1" /> element.</returns><param name="element">The original <paramref name="element" />.</param><param name="labelKey">A <see langword="delegate" /> function used to determine the plain text of the label.</param><typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithReference``1(DivineFramework.UI.UIInputSingleLine{System.Int32},``0,System.String,System.Int32)">
            <summary>Add a reference to an input field.</summary><param name="element">The original <paramref name="element" />.</param><param name="settings">The <see langword="object" /> that contains the reference.</param><param name="name">The <see langword="string" /> identifier of the setting.</param><param name="value">The current value of the referenced setting.</param><typeparam name="T">The <see langword="type" /> of the <see langword="object" /> that contains the reference.</typeparam><returns>A new <see cref="T:DivineFramework.UI.UIInputInt" /> element.</returns>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithReference``1(DivineFramework.UI.UIInputSingleLine{System.Single},``0,System.String,System.Single)">
            <summary>Add a reference to an input field.</summary><param name="element">The original <paramref name="element" />.</param><param name="settings">The <see langword="object" /> that contains the reference.</param><param name="name">The <see langword="string" /> identifier of the setting.</param><param name="value">The current value of the referenced setting.</param><typeparam name="T">The <see langword="type" /> of the <see langword="object" /> that contains the reference.</typeparam><returns>A new <see cref="T:DivineFramework.UI.UIInputFloat" /> element.</returns>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithReference``2(DivineFramework.UI.UIButton,``0,System.String,``1)">
            <summary>Add a reference to a button.</summary><param name="element">The original <paramref name="element" />.</param><param name="settings">The <see langword="object" /> that contains the reference.</param><param name="name">The <see langword="string" /> identifier of the setting.</param><param name="value">The current value of the referenced setting.</param><typeparam name="T">The <see langword="type" /> of the <see langword="object" /> that contains the reference.</typeparam><typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam><returns>A new <see cref="T:DivineFramework.UI.UIButtonReference`1" /> element.</returns>
        </member>
        <member name="M:DivineFramework.UI.ElementExtensions.WithIncrementButtons(DivineFramework.UI.UIInputInt,System.Int32)">
            <summary>Add +/- buttons to a numeric input field.</summary><param name="element">The original <paramref name="element" />.</param><param name="multiplier">The base amount to be added/subtracted with each button press.</param><returns>A new <see cref="T:DivineFramework.UI.UIIntEntry" /> element.</returns>
        </member>
        <member name="T:DivineFramework.UI.Handler`2">
            <summary>Base class for holding and managing multiple UI objects.</summary><typeparam name="T">The class type associated with this <see cref="T:DivineFramework.UI.Handler`2" />. This can be any reference type, not just a <see cref="T:Verse.ModSettings" /> subclass.</typeparam><typeparam name="U">The <see cref="T:DivineFramework.UI.IItem" /> type of the objects that this <see cref="T:DivineFramework.UI.Handler`2" /> will hold.</typeparam><param name="setUpMethod">A <see langword="delegate" /> method that will create and add the various objects needed to create the desired UI.</param><include file="../../Docs/Interfaces.xml" path="doc/Interface/IContainer/Main/*" />
        </member>
        <member name="M:DivineFramework.UI.Handler`2.#ctor(DivineFramework.UI.SetUpDelegate)">
            <summary>Base class for holding and managing multiple UI objects.</summary><typeparam name="T">The class type associated with this <see cref="T:DivineFramework.UI.Handler`2" />. This can be any reference type, not just a <see cref="T:Verse.ModSettings" /> subclass.</typeparam><typeparam name="U">The <see cref="T:DivineFramework.UI.IItem" /> type of the objects that this <see cref="T:DivineFramework.UI.Handler`2" /> will hold.</typeparam><param name="setUpMethod">A <see langword="delegate" /> method that will create and add the various objects needed to create the desired UI.</param><include file="../../Docs/Interfaces.xml" path="doc/Interface/IContainer/Main/*" />
        </member>
        <member name="F:DivineFramework.UI.Handler`2.items">
            <summary>The <see langword="List" /> of objects being managed.</summary>
        </member>
        <member name="F:DivineFramework.UI.Handler`2.scrollPos">
            <summary>Used to keep track of the scroll position for this handler.</summary><remarks>Should be passed by <see langword="ref" /> to <see cref="M:DivineFramework.UI.Listing_ScrollView.BeginScrollView(UnityEngine.Rect,System.Single,UnityEngine.Vector2@,System.Single)" />.</remarks>
        </member>
        <member name="P:DivineFramework.UI.Handler`2.Initialized">
            <summary>Whether all containing items have been initialized.</summary>
        </member>
        <member name="P:DivineFramework.UI.Handler`2.ErrorPrefix">
            <summary>A prefix to add to any error messages generated by this handler.</summary>
        </member>
        <member name="M:DivineFramework.UI.Handler`2.Initialize">
            <summary>Calls <see cref="!:setUpMethod" /> the first time this is called. Initializes all <see cref="F:DivineFramework.UI.Handler`2.items" />.</summary>
        </member>
        <member name="M:DivineFramework.UI.Handler`2.Add(`1,System.String)">
            <summary>Add an item to this <see cref="T:DivineFramework.UI.Handler`2" />.</summary><param name="item">The <see cref="T:DivineFramework.UI.IItem" /> to add.</param><param name="name">Optional name for the item. Must be unique within this <see cref="T:DivineFramework.UI.Handler`2" />.</param><returns><see langword="true" /> if the item was added.</returns>
        </member>
        <member name="M:DivineFramework.UI.Handler`2.Clear">
            <summary>Clear the <see cref="F:DivineFramework.UI.Handler`2.items"/> list.</summary>
        </member>
        <member name="M:DivineFramework.UI.Handler`2.SetUp(System.Boolean)">
            <summary>Calls <see cref="!:setUpMethod" /> if it exists, but only once, unless <paramref name="force" /> is used.</summary><param name="force">Whether to call <see cref="!:setUpMethod" /> even if it's already been called previously. If you use this it is recommended to <see cref="M:DivineFramework.UI.Handler`2.Clear" /> the contents first.</param>
        </member>
        <member name="T:DivineFramework.UI.ITab_Handler">
            <summary>An <see cref="T:RimWorld.ITab"/> that uses a <see cref="T:DivineFramework.UI.SettingsHandler`1"/> to manage its contents.</summary>
        </member>
        <member name="F:DivineFramework.UI.ITab_Handler.handler">
            <summary>The <see cref="T:DivineFramework.UI.SettingsHandler`1"/> associated with this <see cref="T:RimWorld.ITab"/>.</summary>
        </member>
        <member name="F:DivineFramework.UI.ITab_Handler.margin">
            <param name="margin">A margin around the <see cref="T:UnityEngine.Rect" /> passed to the <paramref name="handler" />.</param>&gt;
        </member>
        <member name="M:DivineFramework.UI.ITab_Handler.#ctor(System.Single)">
            <summary /><param name="handler">The <see cref="T:DivineFramework.UI.SettingsHandler`1" /> that will be used to draw this <see cref="T:RimWorld.ITab" />.</param><param name="margin">A margin around the <see cref="T:UnityEngine.Rect" /> passed to the <paramref name="handler" />.</param>
        </member>
        <member name="M:DivineFramework.UI.ITab_Handler.FillTab">
            <inheritdoc />
        </member>
        <member name="T:DivineFramework.UI.SettingsHandler`1">
            <summary>A class for holding and managing multiple <see cref="T:DivineFramework.UI.UIElement" />s.</summary><typeparam name="T">The class type associated with this <see cref="T:DivineFramework.UI.SettingsHandler`1" />. This can be any reference type, not just a <see cref="T:Verse.ModSettings" /> subclass.</typeparam>
        </member>
        <member name="F:DivineFramework.UI.SettingsHandler`1.height">
            <summary>The height of this <see cref="T:DivineFramework.UI.SettingsHandler`1" /> the last time it was drawn.</summary>
        </member>
        <member name="F:DivineFramework.UI.SettingsHandler`1.maxOneColumn">
            <summary><param name="maxOneColumn">Setting this to <see langword="true" /> means that a new column will only be made when a row specifically requests it. Hidden rows will still cause a new column in this case.<br />Setting this to <see langword="false" /> means that a new column will be made if a row will not fit in the <see cref="!:Rect" /> of the <see cref="T:Verse.Listing" />.</param></summary>
        </member>
        <member name="F:DivineFramework.UI.SettingsHandler`1.verticalSpacing">
            <summary><param name="verticalSpacing">The spacing between rows in the <see cref="T:DivineFramework.UI.SettingsHandler`1" />.</param></summary>
        </member>
        <member name="F:DivineFramework.UI.SettingsHandler`1.width">
            <summary>The width for the settings handler that is passed to all rows.</summary>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.#ctor(System.Boolean,DivineFramework.UI.SetUpDelegate,System.Single)">
            <param name="maxOneColumn">Setting this to <see langword="true" /> means that a new column will only be made when a row specifically requests it. Hidden rows will still cause a new column in this case.<br />Setting this to <see langword="false" /> means that a new column will be made if a row will not fit in the <see cref="!:Rect" /> of the <see cref="T:Verse.Listing" />.</param><include file="../../Docs/Handlers.xml" path="doc/Handler/Main/param[@name=&quot;setUpMethod&quot;]" /><param name="verticalSpacing">The spacing between rows in the <see cref="T:DivineFramework.UI.SettingsHandler`1" />.</param>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.AddContainer``1(``0,System.String,System.Boolean)">
            <summary>Add an existing <typeparamref name="TContainer" /> to the <see cref="T:DivineFramework.UI.SettingsHandler`1" />.</summary><typeparam name="TContainer">Any subclass of <see cref="T:DivineFramework.UI.UIContainer" />.</typeparam><param name="container">The <typeparamref name="TContainer" /> to add.</param><include file="../../Docs/Handlers.xml" path="doc/SettingsHandler/RegisterNewRow/param[@name=&quot;name&quot;]" /><include file="../../Docs/Handlers.xml" path="doc/SettingsHandler/RegisterNewRow/param[@name=&quot;newColumn&quot;]" /><returns>The original <typeparamref name="TContainer" />.</returns>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.RegisterNewRow(System.String,System.Single,System.Boolean)">
            <summary>Add a new row to the <see cref="T:DivineFramework.UI.SettingsHandler`1" />. This row is a <see cref="T:DivineFramework.UI.UIRow" /> to hold elements that will be drawn horizontally.</summary><param name="name">An optional name for the row, which can be used to retrieve this element later. Must be unique among all rows within this <see cref="T:DivineFramework.UI.SettingsHandler`1" />.</param><param name="gap">The horizontal spacing between elements in the row.</param><param name="newColumn">Whether to start a new column before drawing this row. Has no affect on nested containers.</param><returns>The <see cref="T:DivineFramework.UI.UIRow" /> for the new row.</returns>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.RegisterNewSection(System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean)">
            <summary>Add a new row to the <see cref="T:DivineFramework.UI.SettingsHandler`1" />. This row is a <see cref="T:DivineFramework.UI.UISection" /> to hold elements that will be drawn vertically inside a section box.</summary><include file="../../Docs/Handlers.xml" path="doc/SettingsHandler/RegisterNewRow/param[@name=&quot;name&quot;]" /><param name="spacing">The vertical spacing between elements in the section.</param><param name="sectionBorder">The space between the border of the section and the <see cref="!:Rect" /> where the elements are drawn, for the top and sides only.</param><param name="bottomBorder">Same as <paramref name="sectionBorder" /> but for the bottom of the section.</param><include file="../../Docs/Handlers.xml" path="doc/SettingsHandler/RegisterNewRow/param[@name=&quot;newColumn&quot;]" /><returns>The <see cref="T:DivineFramework.UI.UISection" /> for the new row.</returns>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.RegisterNewColumn(System.String,System.Nullable{System.Single},System.Boolean)">
            <summary>Add a new row to the <see cref="T:DivineFramework.UI.SettingsHandler`1" />. This row is a <see cref="T:DivineFramework.UI.UIColumn" /> to hold elements that will be drawn vertically.</summary><include file="../../Docs/Handlers.xml" path="doc/SettingsHandler/RegisterNewRow/param[@name=&quot;name&quot;]" /><param name="spacing">The vertical spacing between elements in the section.</param><include file="../../Docs/Handlers.xml" path="doc/SettingsHandler/RegisterNewRow/param[@name=&quot;newColumn&quot;]" /><returns>The <see cref="T:DivineFramework.UI.UIColumn" /> for the new row.</returns>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.Reset">
            <summary>Reset all registered elements to their <see cref="P:DivineFramework.UI.IReference`1.DefaultValue">default values.</see></summary>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.RegisterResettable(DivineFramework.UI.UIElement)">
            <summary>Register an element that implements <see cref="T:DivineFramework.UI.IReference`1" /> so it will be reset when <see cref="M:DivineFramework.UI.SettingsHandler`1.Reset" /> is called.</summary><param name="element">The element to reset.</param>
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.AddGap(System.Single,System.String)">
            <summary>Add a row that's just an empty gap.</summary><param name="height">How tall the gap should be.</param><include file="../../Docs/Handlers.xml" path="doc/SettingsHandler/RegisterNewRow/returns" /><include file="../../Docs/Handlers.xml" path="doc/SettingsHandler/RegisterNewRow/param[@name=&quot;name&quot;]" />
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.AddLine(System.Single,System.String)">
            <summary>Add a row with a horizontal line</summary><include file="../../Docs/UIElements.xml" path="doc/UIContainer/AddLine/param[@name=&quot;gapHeight&quot;]" /><include file="../../Docs/Handlers.xml" path="doc/SettingsHandler/RegisterNewRow/returns" /><include file="../../Docs/Handlers.xml" path="doc/SettingsHandler/RegisterNewRow/param[@name=&quot;name&quot;]" />
        </member>
        <member name="M:DivineFramework.UI.SettingsHandler`1.Draw(Verse.Listing)">
            <summary>Draw all registered rows in the order they were added.</summary><param name="list">The <see cref="T:Verse.Listing" /> where the rows should be drawn.</param>
        </member>
        <member name="T:DivineFramework.UI.TabbedHandler`1">
            <summary>A class for creating a tabbed UI page using <see cref="T:Verse.TabRecord" />s.</summary><include file="../../Docs/Handlers.xml" path="doc/Handler/Main/typeparam[@name=&quot;T&quot;]" />
        </member>
        <member name="F:DivineFramework.UI.TabbedHandler`1.scrollPos">
            <summary>Only use this if you want the scroll position to be sync'd between all tabs. Use each Tab's <see cref="F:DivineFramework.UI.Tab`1.scrollPos" /> instead for per tab scrolling.</summary>
        </member>
        <member name="M:DivineFramework.UI.TabbedHandler`1.#ctor(DivineFramework.UI.SetUpDelegate)">
            <param name="setUpMethod">A <see langword="delegate" /> method that will create and add the various objects needed to create the desired UI.</param>
        </member>
        <member name="P:DivineFramework.UI.TabbedHandler`1.CurTab">
            <summary>The currently displayed <see cref="T:DivineFramework.UI.Tab`1" />.</summary>
        </member>
        <member name="M:DivineFramework.UI.TabbedHandler`1.Initialize">
            <summary>Calls <see cref="!:Handler&lt;T,U&gt;.setUpMethod" /> the first time this is called. Does not initialize <see cref="F:DivineFramework.UI.Handler`2.items" /> since the <see cref="T:Verse.Listing" /> needed to set them up properly may not have been created yet.</summary>
        </member>
        <member name="M:DivineFramework.UI.TabbedHandler`1.AddTab(DivineFramework.UI.SettingsHandler{`0},System.String,DivineFramework.UI.OnClickDelegate,System.Func{System.Boolean})">
            <summary>Add a new tab to the <see cref="T:DivineFramework.UI.TabbedHandler`1" />. Each tab has a <see cref="T:DivineFramework.UI.SettingsHandler`1" /> that will be drawn when that tab is selected.</summary><param name="handler">The <see cref="T:DivineFramework.UI.SettingsHandler`1" /> to draw when this tab is selected.</param><param name="name">A unique name for the tab which can be used to retrieve this tab later. Will be used as the label for the tab if another label is not provided.</param><param name="clickedAction">An optional delegate to be called when the tab is clicked. Defaults to just setting the selected tab to be this tab.</param><param name="selected">An optional delegate to determine if the tab is selected. Defaults to just checking if the selected tab is the same as this tab.</param><returns>The newly created <see cref="T:DivineFramework.UI.Tab`1" />.</returns>
        </member>
        <member name="M:DivineFramework.UI.TabbedHandler`1.DrawTabs(UnityEngine.Rect,UnityEngine.Rect@)">
            <summary>Draws the tabs at the top of the page in the order they were added.</summary><param name="canvas">The <see cref="T:UnityEngine.Rect" /> for the entire space of the page.</param><param name="innerRect">The <see cref="T:UnityEngine.Rect" /> you should use to create the <see cref="T:Verse.Listing" /> passed to <see cref="M:DivineFramework.UI.TabbedHandler`1.DrawContents(Verse.Listing)" />.</param>
        </member>
        <member name="M:DivineFramework.UI.TabbedHandler`1.DrawContents(Verse.Listing)">
            <summary>Draw the contents of the selected tab.</summary><param name="listing">The <see cref="T:Verse.Listing" /> to use.</param>
        </member>
        <member name="T:DivineFramework.UI.Tab`1">
            <summary>A <see cref="T:Verse.TabRecord" /> that has a <see cref="T:DivineFramework.UI.SettingsHandler`1" /> attached.</summary><typeparam name="T">The class type associated with the tab's <see cref="F:DivineFramework.UI.Tab`1.handler">handler</see>.</typeparam>
        </member>
        <member name="F:DivineFramework.UI.Tab`1.handler">
            <summary>The <see cref="T:DivineFramework.UI.SettingsHandler`1" /> associated with this tab.</summary>
        </member>
        <member name="F:DivineFramework.UI.Tab`1.scrollPos">
            <summary>Used to keep track of the scroll position for this handler.</summary><remarks>Should be passed by <see langword="ref" /> to <see cref="M:DivineFramework.UI.Listing_ScrollView.BeginScrollView(UnityEngine.Rect,System.Single,UnityEngine.Vector2@,System.Single)" />.</remarks>
        </member>
        <member name="M:DivineFramework.UI.Tab`1.#ctor(System.String,System.Action,System.Func{System.Boolean},DivineFramework.UI.SettingsHandler{`0})">
            <summary>Creates a new <see cref="T:Verse.TabRecord" /> to use in a <see cref="T:DivineFramework.UI.TabbedHandler`1" />.</summary><param name="name">The name of the <see cref="T:DivineFramework.UI.Tab`1" />. Must be unique within its <see cref="T:DivineFramework.UI.TabbedHandler`1" />. Will be used as the label for the <see cref="T:Verse.TabRecord" /> unless it is overridden by <see cref="M:DivineFramework.UI.Tab`1.WithLabel(System.String)" />.</param><param name="onClick">The <see cref="T:System.Action" /> to perform when the tab is clicked.</param><param name="selectedGetter">A <see cref="T:System.Func`1" /> used to determine if the tab is active.</param><param name="handler">The <see cref="T:DivineFramework.UI.SettingsHandler`1" /> associated with this tab.</param>
        </member>
        <member name="M:DivineFramework.UI.Tab`1.Initialize">
            <summary>Initializes the <see cref="F:DivineFramework.UI.Tab`1.handler" />.</summary>
        </member>
        <member name="M:DivineFramework.UI.Tab`1.GetTip">
            <summary>Get the <see cref="F:DivineFramework.UI.Tab`1.tooltip" />, if it exists.</summary>
        </member>
        <member name="M:DivineFramework.UI.Tab`1.WithLabel(System.String)">
            <summary>Add a player facing label to the tab that is different from the tab's internal <see cref="P:DivineFramework.UI.Tab`1.Name">name</see>.</summary><param name="label" /><returns>The original <see cref="T:DivineFramework.UI.Tab`1" />.</returns>
        </member>
        <member name="M:DivineFramework.UI.Tab`1.WithTooltip(DivineFramework.UI.LabelDelegate)">
            <summary>Add a tooltip to the tab.</summary><returns>The original <see cref="T:DivineFramework.UI.Tab`1" />.</returns><include file="../../Docs/ElementExtensions.xml" path="doc/ElementExtensions/WithTooltip/param[@name=&quot;tooltip&quot;]" />
        </member>
        <member name="M:DivineFramework.UI.Tab`1.DrawContents(Verse.Listing)">
            <summary>Just calls <see cref="M:DivineFramework.UI.SettingsHandler`1.Draw(Verse.Listing)" /> on the <see cref="F:DivineFramework.UI.Tab`1.handler" />.</summary>
        </member>
        <member name="T:DivineFramework.UI.LabelHelper">
            <summary>A common class added to element types implementing <see cref="T:DivineFramework.UI.ILabeled"/>, to unify common functionality.</summary>
        </member>
        <member name="F:DivineFramework.UI.LabelHelper.labelKey">
            <summary>A <see langword="delegate" /> function used to determine the plain text of the label.</summary>
        </member>
        <member name="P:DivineFramework.UI.LabelHelper.Label">
            <summary><inheritdoc cref="P:DivineFramework.UI.ILabeled.Label"/></summary>
        </member>
        <member name="M:DivineFramework.UI.LabelHelper.SetLabel(DivineFramework.UI.LabelDelegate)">
            <summary><inheritdoc cref="P:DivineFramework.UI.ILabeled.SetLabel"/></summary>
        </member>
        <member name="T:DivineFramework.UI.Listing_ScrollView">
            <summary>A <see cref="T:Verse.Listing" /> to make using scrollbars less confusing.</summary><remarks>All you need to do is make a new <see cref="T:DivineFramework.UI.Listing_ScrollView" />, call <see cref="M:DivineFramework.UI.Listing_ScrollView.BeginScrollView(UnityEngine.Rect,System.Single,UnityEngine.Vector2@,System.Single)" />, use the resulting <see cref="T:Verse.Listing_Standard" /> for all your listing needs, then call <see cref="M:DivineFramework.UI.Listing_ScrollView.End" />.</remarks>
        </member>
        <member name="F:DivineFramework.UI.Listing_ScrollView.endingX">
            <summary>The final x value of the inner listing after <see cref="M:DivineFramework.UI.Listing_ScrollView.End"/> was called.</summary>
        </member>
        <member name="M:DivineFramework.UI.Listing_ScrollView.BeginScrollView(UnityEngine.Rect,System.Single,UnityEngine.Vector2@,System.Single)">
            <summary>Use this instead of <see cref="M:Verse.Listing_Standard.Begin(UnityEngine.Rect)" />. If the <paramref name="height" /> is larger than the <paramref name="canvasRect" />, a scrollbar will be used.</summary><param name="canvasRect">The <see cref="T:UnityEngine.Rect" /> for the visible space on the screen.</param><param name="height">
			<para>The height of the inner <see cref="T:UnityEngine.Rect" /> needed to display all contents. There are a few ways to calculate the correct height, depending on your setup.</para>
			<para>If you have set columns, you can start with 0f and then save <see cref="P:Verse.Listing.MaxColumnHeightSeen" /> after everything is drawn. That will cause the height to automatically adjust if the needed height changes.</para>
			<para>If you are letting the <see cref="T:Verse.Listing" /> decide when to start a new column, you can use <see cref="F:DivineFramework.UI.SettingsHandler`1.height" /> to determine the needed height based on how many columns you expect.</para>
		</param><param name="scrollPosition">Used to keep track of how far the window is scrolled in either direction. Should be a variable that is initialized to <see cref="P:UnityEngine.Vector2.zero" />.</param><param name="width">
			<para>Optional width for the inner <see cref="T:UnityEngine.Rect" />. If this is larger than the width of the <paramref name="canvasRect" />, a horizontal scrollbar will be used.</para>
			<para>You can save <see cref="F:DivineFramework.UI.Listing_ScrollView.endingX" /> after everything is drawn and then use that for the width. That will cause the width to automatically adjust if the needed width changes.</para>
		</param><returns>The inner <see cref="T:Verse.Listing_Standard" />. This is what you will actually use for drawing in the inner <see cref="T:UnityEngine.Rect" />.</returns>
        </member>
        <member name="M:DivineFramework.UI.Listing_ScrollView.End">
            <summary>Close everything when you're done.</summary>
        </member>
        <member name="T:DivineFramework.UI.IItem">
            <summary>Interface for classes that can go in an <see cref="T:DivineFramework.UI.IContainer`1" />.</summary>
        </member>
        <member name="P:DivineFramework.UI.IItem.Name">
            <summary>A unique string used to retrieve this item from its container.</summary>
        </member>
        <member name="P:DivineFramework.UI.IItem.ErrorPrefix">
            <summary>A prefix to add to any error messages generated by this item.</summary>
        </member>
        <member name="M:DivineFramework.UI.IItem.Initialize">
            <summary>Initialize any values that need to be set after all other items are added to the parent <see cref="T:DivineFramework.UI.IContainer`1" />.</summary>
        </member>
        <member name="M:DivineFramework.UI.IItem.Validate(System.String@)">
            <summary>Make sure that all required data is present.</summary>
            <param name="reasons">List of reasons that validation failed, to be used in error messages.</param>
            <returns><see langword="false"/> if any critical data is null.</returns>
        </member>
        <member name="M:DivineFramework.UI.IUIElement.Register(System.Single)">
            <summary>Register the element within its container.</summary>
            <param name="parentWidth">The actual width of the parent container.</param>
        </member>
        <member name="M:DivineFramework.UI.IUIElement.Draw(UnityEngine.Rect)">
            <summary>Draw the element.</summary>
            <param name="rect">The <see cref="T:UnityEngine.Rect"/> used to draw the element, calculated by the parent container.</param>
        </member>
        <member name="T:DivineFramework.UI.IContainer`1">
            <summary>Interface for classes that contain a list of <see cref="T:DivineFramework.UI.IItem"/>s.</summary>
            <typeparam name="U">The <see langword='type'/> of <see cref="T:DivineFramework.UI.IItem"/>s in the list.</typeparam>
        </member>
        <member name="M:DivineFramework.UI.IContainer`1.Initialize">
            <summary>Do things that need to be done after all other items are added to this <see cref="T:DivineFramework.UI.IContainer`1" />.</summary>
        </member>
        <member name="M:DivineFramework.UI.IContainer`1.Add(`0,System.String)">
            <summary>Add an item to the container.</summary>
            <param name="item">The item to add.</param>
            <param name="name">Optional name for the element. Must be unique within this container.</param>
        </member>
        <member name="M:DivineFramework.UI.IContainer`1.Clear">
            <summary>Remove all items from the container.</summary>
        </member>
        <member name="M:DivineFramework.UI.IContainer`1.GetNamed(System.String)">
            <summary>Retrieve a specific named <see cref="T:DivineFramework.UI.IItem"/> that has been registered to this <see cref="T:DivineFramework.UI.IContainer`1"/>.</summary>
            <param name="name">The name of the element to retrieve.</param>
            <returns>The named item, or <see langword="null"/> if none was found.</returns>
        </member>
        <member name="T:DivineFramework.UI.IReferenceBase">
            <summary>A non-generic interface for elements with that use a ReferenceHolder</summary>
        </member>
        <member name="M:DivineFramework.UI.IReferenceBase.Validate(System.String@)">
            <inheritdoc cref="M:DivineFramework.UI.IItem.Validate(System.String@)"/>
        </member>
        <member name="M:DivineFramework.UI.IReferenceBase.Reset">
            <summary>Set the referenced setting to its default value.</summary>
        </member>
        <member name="T:DivineFramework.UI.IReference`1">
            <summary>The typed interface for reference holders.</summary><typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam>
        </member>
        <member name="P:DivineFramework.UI.IReference`1.Value">
            <summary>The value of the referenced object.</summary>
        </member>
        <member name="P:DivineFramework.UI.IReference`1.DefaultValue">
            <summary>Default value for the setting, used when resetting.</summary>
        </member>
        <member name="T:DivineFramework.UI.ILabeled">
            <summary>Interface for elements with labels.</summary>
        </member>
        <member name="P:DivineFramework.UI.ILabeled.Label">
            <summary>Property to get the text of the label.</summary>
        </member>
        <member name="P:DivineFramework.UI.ILabeled.SetLabel">
            <summary>Set the <see langword="delegate" /> that will be used to determine the text of the label.</summary>
        </member>
        <member name="P:DivineFramework.UI.ILabeled.FitToText">
            <summary>Whether the element should be resized to fit the full text of the <see cref="P:DivineFramework.UI.ILabeled.Label"/>.</summary>
        </member>
        <member name="T:DivineFramework.UI.IMinMax`1">
            <summary>Interface for elements with numeric min and max values.</summary>
            <typeparam name="U">The numeric type of the associated setting.</typeparam>
        </member>
        <member name="P:DivineFramework.UI.IMinMax`1.Min">
            <summary>The minimum value for this setting.</summary>
        </member>
        <member name="P:DivineFramework.UI.IMinMax`1.Max">
            <summary>The maximum value for this setting.</summary>
        </member>
        <member name="P:DivineFramework.UI.IButton.ButtonHeight">
            <summary>The height of the button.</summary>
        </member>
        <member name="M:DivineFramework.UI.IButton.OnClick">
            <summary>Delegate to be called when the button is clicked.</summary>
        </member>
        <member name="M:DivineFramework.UI.IButton.SetOnClick(DivineFramework.UI.OnClickDelegate)">
            <summary>Set the <see langword="delegate" /> that will be called when the button is clicked.</summary>
        </member>
        <member name="T:DivineFramework.UI.NewElement">
            <summary>Methods for creating new UI elements.</summary>
        </member>
        <member name="M:DivineFramework.UI.NewElement.InputLine``1(System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>Create an input field for entering numbers or text.</summary><typeparam name="U">The <see langword="type" /> of the setting being referenced.</typeparam><param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param><param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param><returns>The newly created <see cref="T:DivineFramework.UI.UIInputSingleLine`1" />.</returns>
        </member>
        <member name="M:DivineFramework.UI.NewElement.Button(DivineFramework.UI.OnClickDelegate,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>Create a basic button.</summary><param name="onClick">The <see langword="delegate" /> to be called when the button is clicked.</param><param name="buttonHeight">A fixed height for the button; optional.</param><param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param><param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param><returns>The newly created <see cref="T:DivineFramework.UI.UIButton" />.</returns>
        </member>
        <member name="M:DivineFramework.UI.NewElement.Checkbox(System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>Create a toggle for a <see langword="bool" /> value that will show a green check mark or a red X.</summary><param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param><param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param><returns>The newly created <see cref="T:DivineFramework.UI.UICheckbox" />.</returns>
        </member>
        <member name="M:DivineFramework.UI.NewElement.Slider``1(System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>Create a horizontal slider for a numeric value.</summary><param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param><param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param><typeparam name="U">The numeric type for the slider: <see langword="int" /> or <see langword="float" />.</typeparam><returns>The newly created <see cref="T:DivineFramework.UI.UISlider`1" />.</returns>
        </member>
        <member name="M:DivineFramework.UI.NewElement.Range``2(System.Nullable{``1},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>Create a slider for an <see cref="!:IntRange" /> or <see cref="!:FloatRange" />.</summary><param name="minRange">Minimum difference between the min and max of the range; optional</param><param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param><param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param><typeparam name="T">The <see langword="type" /> of the setting being referenced. Must be <see cref="!:IntRange" /> or <see cref="!:FloatRange" />.</typeparam><typeparam name="U">The corresponding numeric type of <typeparamref name="T" />: <see cref="T:System.Int32" /> or <see cref="T:System.Single" />.</typeparam>
        </member>
        <member name="M:DivineFramework.UI.NewElement.Label(DivineFramework.UI.LabelDelegate,System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>Create a basic label.</summary><returns>The newly created <see cref="T:DivineFramework.UI.UILabel" />.</returns><param name="labelKey">A <see langword="delegate" /> function used to determine the plain text of the label.</param><param name="relative">Width of the new element relative to its container; optional, should be 0f-1f. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param><param name="absolute">Fixed width for the new element; optional. Only use <paramref name="relative" /> or <paramref name="absolute" />, not both.</param>
        </member>
        <member name="T:DivineFramework.UI.UIElement">
            <summary>The base <see langword="class"/> for implementing <see cref="T:DivineFramework.UI.IUIElement"/>.</summary>
        </member>
        <member name="F:DivineFramework.UI.UIElement.actualWidth">
            <summary>The actual width of the element to be used for drawing.</summary>
        </member>
        <member name="P:DivineFramework.UI.UIElement.RequiresReference">
            <summary> Whether this element type requires a <see cref="T:DivineFramework.UI.IReference`1"/> object. If true, the <see cref="F:DivineFramework.UI.UIElement.reference"/> will be checked during validation.</summary>
        </member>
        <member name="F:DivineFramework.UI.UIElement.relativeWidth">
            <summary>Width of the element relative to its container, used to determine <see cref="F:DivineFramework.UI.UIElement.actualWidth">actual width</see>.</summary>
        </member>
        <member name="F:DivineFramework.UI.UIElement.fixedWidth">
            <summary>A set width to use for the <see cref="F:DivineFramework.UI.UIElement.actualWidth">actual width</see>.</summary>
        </member>
        <member name="F:DivineFramework.UI.UIElement.height">
            <summary>The height required to display the element properly.</summary>
        </member>
        <member name="F:DivineFramework.UI.UIElement.sizeValid">
            <summary />
        </member>
        <member name="P:DivineFramework.UI.UIElement.Width">
            <summary>Property to access the <see cref="F:DivineFramework.UI.UIElement.actualWidth">actual width</see> of the element.</summary>
        </member>
        <member name="P:DivineFramework.UI.UIElement.Height">
            <summary>Property to access the current height of an element.</summary>
        </member>
        <member name="P:DivineFramework.UI.UIElement.IsHidden">
            <summary>Whether the element should be drawn or not.</summary>
        </member>
        <member name="P:DivineFramework.UI.UIElement.SizeValid">
            <summary>Used to determine if the element needs to be re-initialized because the desired sizing has changed.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIElement.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <include file="../../Docs/NewElement.xml" path="doc/NewElement/Common/*" />
        </member>
        <member name="M:DivineFramework.UI.UIElement.#ctor(DivineFramework.UI.UIElement)">
            <summary>Creates a new instance of this class using an existing element as a template.</summary><param name="element">The existing element to use as a template.</param>
        </member>
        <member name="M:DivineFramework.UI.UIElement.Register(System.Single)">
            <summary><inheritdoc /> The <see cref="P:DivineFramework.UI.UIElement.Width">actual width</see> is calculated if <see cref="F:DivineFramework.UI.UIElement.relativeWidth">relative width</see> or <see cref="F:DivineFramework.UI.UIElement.fixedWidth">fixed width</see> is set.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIElement.Hide(System.Boolean)">
            <summary>Set the element to be hidden or not.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIElement.AddName(System.String)">
            <summary>Add a name to the element.</summary><remarks>Only call this after checking that the name is unique.</remarks><param name="name">The name to add to the element.</param>
        </member>
        <member name="M:DivineFramework.UI.UIElement.DrawTooltip(UnityEngine.Rect)">
            <summary><include file="../../Docs/UIElements.xml" path="doc/Common/DrawTooltip/summary" /> Also draws a highlight over the whole <paramref name="rect" />.</summary><include file="../../Docs/UIElements.xml" path="doc/Common/DrawTooltip/param" />
        </member>
        <member name="M:DivineFramework.UI.UIElement.CheckLabelSize">
            <summary>Determines if the text of a labeled element still fits in the element's current size. Sets <see cref="F:DivineFramework.UI.UIElement.sizeValid"/> false if the size needs to be recalculated.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIElement.GetLabelHeight(DivineFramework.UI.ILabeled)">
            <summary>Determine the height required to display the label of a labeled element.</summary><param name="element">The element that implements <see cref="T:DivineFramework.UI.ILabeled" />.</param><returns>The desired height.</returns>
        </member>
        <member name="M:DivineFramework.UI.UIElement.GetLabelWidth(DivineFramework.UI.ILabeled)">
            <summary>Determine the width required to display the label of a labeled element.</summary><param name="element">The element that implements <see cref="T:DivineFramework.UI.ILabeled" />.</param><returns>The desired width.</returns>
        </member>
        <member name="M:DivineFramework.UI.UIElement.ToString">
            <inheritdoc/>
        </member>
        <member name="T:DivineFramework.UI.UIIntEntry">
            <summary>An element that allows the user to input an <see cref="T:System.Int32"/>, with buttons to increase/decrease the value by a base <see cref="F:DivineFramework.UI.UIIntEntry.multiplier">amount</see> and that amount x10. Optional min and max values. Can use shift click and ctrl click to increase the amount.</summary>
        </member>
        <member name="F:DivineFramework.UI.UIIntEntry.multiplier">
            <summary><param name="multiplier">The base amount for the buttons.</param></summary>
        </member>
        <member name="M:DivineFramework.UI.UIIntEntry.#ctor(DivineFramework.UI.UIInputInt,System.Int32)">
            <include file="../../Docs/Constructors.xml" path="doc/DerivedFromParent/*" /><param name="multiplier">The base amount for the buttons.</param>
        </member>
        <member name="T:DivineFramework.UI.UILabel">
            <summary>A simple text element.</summary>
        </member>
        <member name="M:DivineFramework.UI.UILabel.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <include file="../../Docs/NewElement.xml" path="doc/NewElement/Common/*" />
        </member>
        <member name="M:DivineFramework.UI.UILabel.Initialize">
            <summary><inheritdoc/> <see cref="F:DivineFramework.UI.UIElement.height">Height</see> is calculated so that the entire label will be visible.</summary>
        </member>
        <member name="M:DivineFramework.UI.UILabel.Draw(UnityEngine.Rect)">
            <summary><inheritdoc/> Checks if the height of the element is still valid.</summary><inheritdoc/>
        </member>
        <member name="M:DivineFramework.UI.UILabel.DrawTooltip(UnityEngine.Rect)">
            <summary>Draws a tooltip if the mouse is hovered over the <paramref name="rect" />.</summary><param name="rect">The <see cref="T:UnityEngine.Rect" /> for the tooltip area.</param>
        </member>
        <member name="T:DivineFramework.UI.UIHeader">
            <summary>A <see cref="T:DivineFramework.UI.UILabel" /> but bigger.</summary>
        </member>
        <member name="M:DivineFramework.UI.UIHeader.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <include file="../../Docs/NewElement.xml" path="doc/NewElement/Common/*" />
        </member>
        <member name="T:DivineFramework.LogUtil">
            <summary>Methods for logging to the console.</summary>
        </member>
        <member name="M:DivineFramework.LogUtil.Message(System.String,System.Boolean)">
            <summary>Calls the base <see cref="T:Verse.Log" /> version with a prefix identifying the calling mod.</summary><param name="message">The text of the log message.</param><param name="debugOnly">Whether this message should only be logged if debug logging is active in the calling mod.<br />Defaults to <see langword="false" />, meaning the message will always be logged.</param>
        </member>
        <member name="M:DivineFramework.LogUtil.Warning(System.String,System.Boolean)">
            <summary>Calls the base <see cref="T:Verse.Log" /> version with a prefix identifying the calling mod.</summary><param name="message">The text of the log message.</param><param name="debugOnly">Whether this message should only be logged if debug logging is active in the calling mod.<br />Defaults to <see langword="false" />, meaning the message will always be logged.</param>
        </member>
        <member name="M:DivineFramework.LogUtil.WarningOnce(System.String,System.Int32,System.Boolean)">
            <summary>Calls the base <see cref="T:Verse.Log" /> version with a prefix identifying the calling mod.</summary><param name="message">The text of the log message.</param><param name="debugOnly">Whether this message should only be logged if debug logging is active in the calling mod.<br />Defaults to <see langword="false" />, meaning the message will always be logged.</param><param name="key">A number used to determine if this message has already been logged. Should be unique for each usage.</param>
        </member>
        <member name="M:DivineFramework.LogUtil.Error(System.String,System.Boolean)">
            <summary>Calls the base <see cref="T:Verse.Log" /> version with a prefix identifying the calling mod.</summary><param name="message">The text of the log message.</param><param name="debugOnly">Whether this message should only be logged if debug logging is active in the calling mod.<br />Defaults to <see langword="false" />, meaning the message will always be logged.</param>
        </member>
        <member name="M:DivineFramework.LogUtil.ErrorOnce(System.String,System.Int32,System.Boolean)">
            <summary>Calls the base <see cref="T:Verse.Log" /> version with a prefix identifying the calling mod.</summary><param name="message">The text of the log message.</param><param name="debugOnly">Whether this message should only be logged if debug logging is active in the calling mod.<br />Defaults to <see langword="false" />, meaning the message will always be logged.</param><param name="key">A number used to determine if this message has already been logged. Should be unique for each usage.</param>
        </member>
        <member name="T:DivineFramework.LogToFile">
            <summary>Logs messages to a custom log file on the desktop.</summary>
        </member>
        <member name="M:DivineFramework.LogToFile.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:DivineFramework.LogToFile" /> class.</summary><remarks>You should only have one instance of this class per log file. Make sure to call <see cref="M:DivineFramework.LogToFile.Close" /> when finished.</remarks><param name="fileName">The name of the log file. Will be placed on the desktop.</param><param name="autoFlush">If set to <see langword="true" />, the data will be written to the file after every write operation. If set to <see langword="false" />, the data will be written to the file only when the buffer is full.</param>
        </member>
        <member name="M:DivineFramework.LogToFile.Log(System.String)">
            <summary>Logs a message to the desktop log file.</summary><param name="message">The text of the log message.</param>
        </member>
        <member name="M:DivineFramework.LogToFile.Close">
            <summary>Stops writing to the file and frees up resources.</summary><remarks>Use this when you've finished logging. The file will be opened again if <see cref="M:DivineFramework.LogToFile.Log(System.String)" /> is used.</remarks>
        </member>
        <member name="T:DivineFramework.ModManagement">
            <summary>A class that allows mods to register with the framework, which will check compatibility for each registered mod.</summary>
        </member>
        <member name="M:DivineFramework.ModManagement.RegisterMod(System.String,System.String,System.Version,System.String,System.Func{System.Boolean})">
            <summary>Register your mod with the framework; this enables certain logging features and checks that the correct version of the framework is loaded.</summary><remarks>The recommended place to call this is in the constructor of your <see cref="T:Verse.Mod" /> class, or in the constructor of a class with the <see cref="T:Verse.StaticConstructorOnStartup" /> attribute.</remarks><param name="translationKey">A translation key for the name of the mod. Used for player facing messages.</param><param name="assemblyName">The name of the assembly in the mod that references DivineFramework.<br />Recommended usage:<code>typeof(ClassFromYourAssembly).Assembly.GetName().Name</code></param><param name="versionNeeded">The version of DivineFramework required by the mod.</param><param name="wrapMessage">Text to prefix logging messages; optional, will default to <paramref name="assemblyName" />.</param><param name="debugDelegate">A delegate to determine if debug logging is active for this mod; optional, will default to always <see langword="true" />, meaning everything will be logged.</param>
        </member>
    </members>
</doc>
